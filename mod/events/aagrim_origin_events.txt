namespace = aagrimstarts

# (on_game_start_country)
country_event = {
	id = aagrimstarts.2000
	hide_window = yes
	is_triggered_only = yes
	trigger = { merg_is_default_empire = yes }
	immediate = {
		set_update_modifiers_batch = begin
		# if = { limit = { NOT = { has_origin = origin_default } } sometimes the presets can lose they origin
		get_capital_planet = yes # TODO Maybe too early
		give_tech_no_error_effect = { TECH = tech_planetary_defenses MESSAGE = no }		# Tier 0
		give_tech_no_error_effect = { TECH = tech_assault_armies MESSAGE = no }			# Tier 0
		if = {
			limit = { NOR = { is_ai = yes has_global_flag = allthatisgrimdark_mod } }
			set_global_flag = allthatisgrimdark_mod
		}
		if = { # 1 Setup Barbaric Horde "Ork Horde"
			limit = {
				OR = {
					has_origin = origin_barbarichorde
					has_country_flag = ork_empire
					owner_main_species = {
						OR = {
							AND = { # Compat Mod "WH species"
								has_global_flag = WHspecies_installed
								OR = { species_portrait = "Orkz" is_species_class = "Orkz"	}
							}
							# is_species_class = "Ork"	# Compat Mod "Orks species" TODO
							has_trait = "trait_orkz"
							is_species = name_list_ORK1
						}
					}
				}
			}
			give_technology = { message = no tech = tech_artificial_moral_codes }		# tier = 2
			give_tech_option_or_progress_effect = { TECH = tech_penal_colonies }		# tier = 3
			if = {
				limit = { exists = event_target:capital_planet }
				event_target:capital_planet = {
					add_deposit = d_ore_rich_caverns
					add_deposit = d_ore_rich_caverns
					add_deposit = d_lichen_fields
					add_deposit = d_fungal_caves
					add_deposit = d_fungal_caves
					add_deposit = d_fungal_caves
					add_deposit = d_searing_desert
					remove_district = district_city
					add_district = district_industrial
					remove_building = building_foundry_1
					remove_building = building_temple
					remove_building = building_factory_1
					remove_building = building_commercial_zone
					remove_building = building_bureaucratic_1
					remove_building = building_research_lab_1
					add_building = building_mekworkshop
					add_building = building_squigburna
				}
			}
			owner_main_species = {
				while = { count = 3 random_species_pop = { kill_pop = yes } }
				if = {
					limit = { NOT = { has_trait = trait_pc_nuked_preference } }
					change_species_characteristics = { add_trait = trait_pc_nuked_preference }
				}
				if = {
					limit = { NOT = { has_trait = trait_survivor } }
					change_species_characteristics = { add_trait = trait_survivor }
				}
				if = {
					limit = { NOT = { has_trait = trait_orkz } }
					change_species_characteristics = { add_trait = trait_orkz can_change_leader = yes }
				}
				random_galaxy_species = {
					limit = {
						is_sapient = yes
						is_same_species_class = prev
						NOT = { is_same_species = prev }
						OR = {
							AND = { # Compat Mod "WH species"
								has_global_flag = WHspecies_installed
								OR = { species_portrait = "Orkz" is_species_class = "Orkz"	}
							}
							has_trait = "trait_orkz"
							# AND = { is_species_class = "HUM" species_portrait = "humanoid_hp_12" }
							# species_portrait = prev # TODO scope allowed?
							is_species = name_list_ORK1
						}
					}
					set_species_identity = prev
				}
			}
			random_owned_species = {
				limit = {
					is_sapient = yes
					NOT = { is_same_species = prev.owner_main_species }
				}
				if = {
					limit = { NOT = { has_trait = trait_syncretic_proles } }
					change_species_characteristics = { add_trait = trait_syncretic_proles }
				}
				if = {
					limit = { NOT = { has_trait = trait_survivor } }
					change_species_characteristics = { add_trait = trait_survivor }
				}
				save_event_target_as = servile_species
				if = { # Compare with prescipted empire design
					limit = {
						NOT = { has_trait = trait_incubator }
						OR = { root = { is_ai = yes } has_toxoids = yes }
					}
					change_species_characteristics = { add_trait = trait_incubator }
				}
			}
			country_event = { id = aagrimstarts.222 days = 1 } # Set Servile Species
			if = { # Compat
				limit = { NOT = { has_origin = origin_barbarichorde } }
				set_origin = origin_barbarichorde
			}
			every_owned_leader = {
				limit = {
					NOR = { leader_class = scientist species = { has_trait = trait_very_strong } }
				}
				modify_species = { add_trait = trait_very_strong }
			}
			set_country_flag = ork_empire
			country_event = { id = aagrimstarts.2007 days = 2 } # relations
		}
		else_if = { # 2 Setup Shroud Rage
			limit = { OR = { has_origin = origin_shroudrage has_country_flag = khorne is_species = PRESCRIPTED_species_name_khorne } }
			owner_main_species = {
				if = {
					limit = { NOT = { has_trait = trait_pc_nuked_preference } }
					change_species_characteristics = { add_trait = trait_pc_nuked_preference }
				}
				if = {
					limit = { NOT = { has_trait = trait_survivor } }
					change_species_characteristics = { add_trait = trait_survivor }
				}
			}
			if = { # Compare with prescipted empire design
				limit = {
					host_has_dlc = "Apocalypse"
					NOT = { has_civic = civic_barbaric_despoilers }
				}
				# force_add_civic = civic_barbaric_despoilers
				change_government = {
					civics = { civic = civic_barbaric_despoilers }
					remove_invalid_civics = yes
				}
			}
			country_event = { id = aagrimstarts.3 }
		}
		else_if = { # 3 Setup Shroud Mutated
			limit = { OR = { has_origin = origin_shroudmutated has_country_flag = tzeentch is_species = "Tzeentick" } }
			give_technology = { message = yes tech = tech_psionic_theory }		# Tier 3
			give_technology = { message = no tech = tech_telepathy }
			set_country_flag = breached_shroud
			if = {
				limit = { exists = event_target:capital_planet }
				event_target:capital_planet = {
					create_pop = { species = owner_species count = 6 ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } }
					add_district_and_planet_size_if_needed_effect = { district = district_city }
					remove_building = building_research_lab_1
					add_building = building_holo_theatres
					add_building = building_factory_1
				}
			}
			add_resource = { energy = 1000 }
			country_event = { id = utopia.2656 days = 2 }
			set_country_flag = chaos_empire
			country_event = { id = aagrimstarts.2002 days = 2 } # relations
		}
		else_if = { # 4 Setup Shroud Sick
			limit = {
				OR = {
					has_shroudsick_origin = yes # has_country_flag = nurgle
					is_species = "Nurglen"
				}
			}
			give_technology = { tech = tech_genome_mapping message = yes }				# Tier 1
			# give_tech_no_error_effect = { TECH = tech_society_1 MESSAGE = yes }		# Tier 2
			# give_tech_no_error_effect = { TECH = tech_society_2 MESSAGE = yes }		# Tier 3
			give_technology = { message = no tech = tech_gene_tailoring }				# Tier 3
			give_technology = { message = no tech = tech_glandular_acclimation }
			give_technology = { message = no tech = tech_gene_seed_purification }
			give_technology = { message = no tech = tech_exotic_gases }

			# if = {
			# 	limit = { is_gestalt = no }
			if = {
				limit = { has_necroids = yes } # is_reanimator = no
				if = {
					limit = {
						# is_ai = yes
						owner_main_species = {
							NOR = {
								has_trait = trait_necrophage
								has_trait = trait_plantoid_budding
								has_trait = trait_lithoid_budding
								has_trait = trait_advanced_budding
								has_trait = trait_tiyanki
							}
						}
						NOR = {
							is_xenophile = yes
							has_ethic = ethic_fanatic_egalitarian
							# is_death_cult_empire = yes
							has_civic = civic_hive_empath
							has_civic = civic_permanent_employment
						}
					}
					owner_main_species = {
						change_species_characteristics = { add_trait = trait_necrophage can_change_leader = yes }
					}
				}
				if = {
					limit = { NOR = { is_reanimator = yes is_pacifist = yes } }
					force_add_civic = civic_reanimated_armies
				}
				set_origin = origin_necrophage
			}
			owner_main_species = {
				if = {
					limit = { NOT = { has_trait = trait_shroud_sick } }
					change_species_characteristics = { add_trait = trait_shroud_sick add_traits_at_start_of_list = yes }
				}
			}
			# }
			if = {
				limit = { exists = event_target:capital_planet }
				event_target:capital_planet = {
					add_building = building_hive_major_capital_sick
					add_building = building_hive_node_sick
					add_building = building_foundry_1
					add_building = building_hive_warren_sick
					add_building = building_hive_warren_sick
					add_district = { district_type = district_generator_infected ignore_cap = yes }
					add_district = { district_type = district_mining_infected ignore_cap = yes }
					add_district = { district_type = district_farming_infected ignore_cap = yes }
					add_district = { district_type = district_generator_infected ignore_cap = yes }
					add_district = { district_type = district_mining_infected ignore_cap = yes }
					add_district = { district_type = district_farming_infected ignore_cap = yes }
					add_district = { district_type = district_hive_infected ignore_cap = yes }
					create_pop = { species = owner_species count = 6 ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } }
					solar_system = {
						random_system_planet = {
							limit = { is_star = no is_colony = no }
							change_pc = pc_nuked
							add_deposit = d_ore_rich_caverns
							add_deposit = d_fungal_caves
							if = {
								limit = { planet_size < 14 }
								set_planet_size = 14
							}
						}
					}
				}
			}
			set_country_flag = chaos_empire
			country_event = { id = aagrimstarts.2002 days = 2 } # relations
		}
		else_if = { # 5 Setup Shroud Sinners
			limit = {
				OR = {
					has_origin = origin_shroudsinners
					has_country_flag = slaanesh
					AND = {
						owner_main_species = { is_species_class = "Chaos_Daemons" has_trait = trait_daemons } # Compat Mod "WH species"
						exists = ruler
						ruler.species = { species_portrait = "Slaanesh19" }
					}
					owner_main_species = { is_species = Slaaneshi }
				}
			}
			if = {
				limit = { NOT = { has_origin = origin_shroudsinners } }	# Compat
				set_origin = origin_shroudsinners
			}
			give_technology = { message = yes tech = tech_psionic_theory }		# Tier 3
			give_technology = { message = no tech = tech_exotic_gases }
			give_technology = { message = no tech = tech_rare_crystals }
			give_technology = { message = no tech = tech_hyper_entertainment_forum }
			give_technology = { message = no tech = tech_paradise_dome }
			# log="Give shroudsinners empire \\[This.GetName] $tech_subdermal_stimulation$"
			give_technology = { message = no tech = tech_subdermal_stimulation }
			set_country_flag = breached_shroud
			if = {
				limit = { exists = event_target:capital_planet }
				event_target:capital_planet = {
					create_pop = { species = owner_species count = 7 ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } }
					add_deposit = d_decrepit_dwellings
					add_district_and_planet_size_if_needed_effect = { district = district_farming }
					add_district_and_planet_size_if_needed_effect = { district = district_industrial }
					add_district_and_planet_size_if_needed_effect = { district = district_industrial }
					add_district = { district_type = district_mining ignore_cap = yes }
					add_building = building_paradise_dome
					add_building = building_hyper_entertainment_forum
					remove_building = building_factory_1
					remove_building = building_foundry_1
					remove_building = building_temple
					remove_building = building_research_lab_1
					add_building = building_crystal_plant
					add_building = building_refinery
				}
			}
			add_resource = { energy = 1000 }
			if = { # Compare with prescipted empire design
				limit = {
					NOT = { has_civic = civic_merchant_guilds }
					has_megacorp = yes
				}
				force_add_civic = civic_merchant_guilds
			}
			country_event = { id = utopia.2656 days = 2 }
			set_country_flag = chaos_empire
			country_event = { id = aagrimstarts.2002 days = 2 } # relations
		}
		else_if = { # 6 Setup Soul Keepers
			limit = {
				OR = {
					has_origin = origin_soulkeepers
					has_country_flag = eldar_empire
					# owner_main_species = { is_species_class = "Eldars" } # Compat Mod "WH species"
					owner_main_species = { has_trait = trait_eldar } # Compat Mod "WH species"
					is_species = name_list_ELDAR1
				}
			}
			if = { # Compat
				limit = { NOR = { has_origin = origin_soulkeepers has_soulkeepers_origin = yes } }
				set_origin = origin_soulkeepers
			}
			if = { # Do it "later" (for compatibility)
				limit = {
					exists = event_target:capital_planet
					NOT = { event_target:capital_planet = { has_planet_flag = void_dweller_habitat_1 } }
				}
				event_target:capital_planet = {
					clear_deposits = yes
					clear_blockers = yes
					remove_all_districts = yes
					remove_all_buildings = yes
					set_planet_flag = void_dweller_habitat_1
					set_planet_flag = megastructure
					set_planet_flag = habitat
					while = { count = 22 random_owned_pop = { kill_pop = yes } } # Get them later back
					solar_system = {
						if = {
							limit = { count_system_planet = { limit = { has_planet_flag = habitat_1_planet } count = 0 } }
							if = {
								limit = { exists = prev.orbit }
								prev.orbit = { save_event_target_as = habitat_1_planet }
							}
							else_if = {
								limit = { prev = { is_moon = yes } }
								random_system_planet = {
									limit = {
										NOR = { has_planet_flag = habitat_2_planet has_planet_flag = habitat_3_planet }
										is_planet = prevprev.orbit
									}
									weights = { base = 1
										modifier = { add = 25 has_planet_flag = has_megastructure }
									}
									save_event_target_as = habitat_1_planet
								}
							}
							else_if = {
								limit = {
									exists = prev.planet
									prev.planet = {
										NOT = { has_planet_flag = habitat }
									}
								}
								prev.planet = { save_event_target_as = habitat_1_planet }
							}
							else = {
								random_system_planet = {
									limit = { NOR = { has_planet_flag = habitat_2_planet has_planet_flag = habitat_3_planet is_planet = prevprev has_planet_flag = habitat } }
									weights = { base = 1
										modifier = { add = 50
											OR = {
												AND = {
													exists = orbit
													orbit = { is_planet = prevprevprev }
												}
												AND = {
													exists = planet
													planet = { is_planet = prevprevprev }
												}
											}
										}
										modifier = { add = 25 has_planet_flag = has_megastructure }
									}
									save_event_target_as = habitat_1_planet
								}
							}
							event_target:habitat_1_planet = { set_planet_flag = habitat_1_planet set_planet_flag = has_megastructure save_event_target_as = target_planet }
						}
						if = {
							limit = { count_system_planet = { limit = { has_planet_flag = habitat_2_planet } count = 0 } }
							random_system_planet = {
								limit = {
									is_artificial = no
									has_deposit = yes
									NOR = { has_planet_flag = habitat_1_planet has_planet_flag = habitat_3_planet }
									has_deposit_for = shipclass_mining_station has_orbital_mining_deposit = yes
								}
								weights = { base = 1
									modifier = { add = 25 has_planet_flag = has_megastructure }
								}
								set_planet_flag = habitat_2_planet
							}
						}
						if = {
							limit = { count_system_planet = { limit = { has_planet_flag = habitat_3_planet } count = 0 } }
							random_system_planet = {
								limit = {
									is_artificial = no
									has_deposit = yes
									NOR = { has_planet_flag = habitat_1_planet has_planet_flag = habitat_2_planet }
									has_deposit_for = shipclass_mining_station has_orbital_energy_deposit = yes
								}
								weights = { base = 1
									modifier = { add = 25 has_planet_flag = has_megastructure }
								}
								set_planet_flag = habitat_3_planet
							}
						}
					}

					void_dweller_home_planet_setup = yes
					validate_and_repair_planet_buildings_and_districts = yes # Replace/removes all invalid (potential trigger not fulfilled) buildings and districts, then repairs all ruined buildings on the scoped planet
				}
			}
			owner_main_species = {
				if = {
					limit = { has_trait = trait_cybernetic }
					change_species_characteristics = { remove_trait = trait_cybernetic }
				}
				if = {
					limit = { NOT = { has_trait = trait_eldar } }
					change_species_characteristics = { add_trait = trait_eldar can_change_leader = yes }
				}
				if = {
					limit = { NOT = { has_trait = trait_pc_habitat_preference } }
					change_species_characteristics = { add_trait = trait_pc_habitat_preference }
				}
				if = {
					limit = { NOT = { has_trait = trait_void_dweller_1 } }
					change_species_characteristics = { add_trait = trait_void_dweller_1 }
				}
				if = {
					limit = { NOT = { has_trait = trait_latent_psionic } }
					change_species_characteristics = { add_trait = trait_latent_psionic }
				}
				if = {
					limit = { any_system = { has_star_flag = eyechaos_homeworld } }
					random_system = {
						limit = { has_star_flag = eyechaos_homeworld }
						random_system_planet = {
							limit = { has_planet_flag = black_legion_homeplanet }
							save_event_target_as = eldar_homeworld
						}
					}
				}

				modify_species = {
					remove_trait = trait_nomadic
					remove_trait = trait_latent_psionic
					add_trait = trait_psionic
					add_trait = trait_pc_habitat_preference
					add_trait = trait_void_dweller_1
					add_traits_at_start_of_list = yes
					ideal_planet_class = event_target:capital_planet
					effect = {
						event_target:capital_planet = {
							if = {
								limit = { owner = { is_ai = no } }
								while = { count = 3
									random_owned_pop = {
										limit = { NOT = { pop_has_trait = trait_psionic } }
										kill_pop = yes
									}
								}
							}
							create_pop = { species = prev count = 3 ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } }
						}
						if = {
							limit = { exists = event_target:eldar_homeworld }
							set_species_homeworld = event_target:eldar_homeworld
						}
						# set_species_identity = prev
					}
				}
			}
			country_event = { id = aagrimstarts.2005 days = 3 } # relations
			country_event = { id = aagrimstarts.7 days = 1 }
		}
		else_if = { # 7 Setup Pain Drinkers
			limit = {
				OR = {
					has_origin = origin_paindrinkers
					has_country_flag = darkeldar_empire
					owner_main_species = {
						OR = {
							species_portrait = "Drukhari"  # Compat Mod "WH species" is_species_class = "Drukhari"
							has_trait = trait_drukhari # Compat Mod "WH species"
							is_species = name_list_DARKELDAR1
						}
					}
				}
			}
			if = {
				limit = {
					NAND = {
						has_origin = origin_paindrinkers
						owner_main_species = {
							OR = {
								species_portrait = "Drukhari"  # Compat Mod "WH species" is_species_class = "Drukhari"
								has_trait = trait_drukhari # Compat Mod "WH species"
								is_species = name_list_DARKELDAR1
							}
						}
					}
				}
				set_origin = origin_paindrinkers
			}
			if = { # Compare with vanilla and prescipted empire design
				limit = {
					host_has_dlc = "Apocalypse"
					is_militarist = yes
					NOR = { has_civic = civic_barbaric_despoilers has_valid_civic = civic_fanatic_purifiers is_xenophile = yes }
					OR = { is_authoritarian = yes is_xenophobe = yes }
				}
				force_add_civic = civic_barbaric_despoilers
				# Effect failed to calculate configuration
				# change_government = {
				# 	civics = { civic = civic_barbaric_despoilers }
				# 	remove_invalid_civics = yes
				# }
			}
			country_event = { id = aagrimstarts.8 }
		}
		else_if = { # 8 setup_greatergood "Tau Empire"
			limit = {
				OR = {
					has_origin = origin_greatergood
					# has_origin = origin_tau_colony
					has_country_flag = tau_empire
					AND = { is_ai = no has_civic = civic_tau_government } # Mod "Tau Fleet Weapons"
					owner_main_species = {
						has_trait = trait_tau		# Compat Mod "WH species" and WH40k Tau
						# is_species_class = "Tau"	# Compat Mod "WH species"
					}
					is_species = name_list_TAU1
				}
			}
			if = {
				limit = { NOT = { has_origin = origin_greatergood } } # Compat
				set_origin = origin_greatergood
			}
			if = { # Compare with prescipted empire design
				limit = {
					NOT = { has_civic = civic_merchant_guilds }
					has_megacorp = yes
				}
				force_add_civic = civic_merchant_guilds
			}
			country_event = { id = aagrimstarts.9 }
			country_event = { id = aagrimstarts.2004 days = 2 } # relations
		}
		else_if = { # 9 setup_bioreformers
			limit = {
				OR = {
					has_origin = origin_bioreformers
					has_country_flag = tyranid_empire
					has_origin = origin_tyranid_planet # Compat Mod "Warhammer 40K - Tyranids"
					owner_main_species = {
						has_trait = trait_tyranid # Compat Mod "Warhammer 40K - Tyranids"
					}
					is_species = name_list_TYRANID1
				}
				owner_main_species = {
					NOR = {
						is_species_class = "Genestealer"	# Compat Mod "WH species"
						species_portrait = "Genestealer"	# Compat Mod "WH species"
						is_species = "Genestealer"
					}
				}
			}
			if = { # Compare with prescipted empire design
				limit = {
					OR = { is_ai = yes has_toxoids = yes }
					owner_main_species = {
						NOR = { has_trait = trait_noxious has_trait = trait_incubator }
					}
				}
				owner_main_species = {
					change_species_characteristics = { add_trait = trait_noxious add_trait = trait_incubator }
				}
			}
			country_event = { id = aagrimstarts.10 }
		}
		else_if = { # 10 setup_reawakened
			limit = {
				OR = {
					has_necron_origin = yes # has_origin = origin_necron_awakening # has_country_flag = necron_empire
					owner_main_species = { has_trait = trait_necrons }
					AND = { is_ai = no has_civic = civic_necron_legion } # Mod "Necron Fleet Weapons"
					is_species = name_list_NECRON1
				}
			}
			country_event = { id = aagrimstarts.11 days = 1 }
		}
		else_if = { # 11 Setup "Adeptus Mechanicus"
			limit = {
				OR = {
					has_machine_cult = yes
					AND = { has_country_flag = mankind_star_empire has_origin = origin_syncretic_evolution }
					owner_main_species = { is_species_class = "Mechanicus" } # Compat Mod "WH species"
					# is_species = trait_adeptus_mechanicus TODO TEST
				}
			}
			if = { # Compare with prescipted empire design
				limit = {
					OR = { is_ai = yes has_machine_age_dlc = yes }
					any_owned_species = {
						is_species_class = "HUM"
						NOR = { species_portrait = tox2 species_portrait = cyb12 }
					}
				}
				every_owned_species = {
					limit = {
						is_species_class = "HUM"
						NOR = { species_portrait = tox2 species_portrait = cyb12 species_portrait = cyb12_m_03 species_portrait = cyb12_f_03 }
					}
					change_species_portrait = cyb12_m_03
				}
			}
			if = { # Omit purging own pops
				limit = {
					any_owned_species = {
						NOR = { is_species_class = "Mechanicus" is_species_class = "HUM" } # is_species_class = "Imperium" dropped backward
					}
				}
				every_owned_species = {
					limit = {
						NOR = { is_species_class = "Mechanicus" is_species_class = "HUM" } # is_species_class = "Imperium" dropped backward
					}
					mirror_species = { CLASS = HUM }
					if = {
						limit = { exists = prev.founder_species }
						event_target:mirror_species = { set_species_identity = prevprev.founder_species }
					}
					else = {
						event_target:mirror_species = { set_species_identity = prevprev.owner_main_species }
					}
				}
				change_dominant_species = { species = event_target:mirror_species change_all = yes }
			}
			if = {
				limit = { OR = { is_ai = yes has_toxoids = yes } }
				if = {
					limit = { graphical_culture = mammalian_01 }
					set_graphical_culture = toxoid_01
					set_city_graphical_culture = toxoid_01
				}
				if = {
					limit = {
						owner_main_species = {
							is_species_class = "HUM"
							NOT = { species_portrait = tox2 }
						}
					}
					owner_main_species = { change_species_portrait = tox2 }
				}
			}

			if = {
				limit = { has_machine_cult = no }
				set_origin = origin_iforge # origin_mechanists
			}

			if = { # Compare with prescipted empire design
				limit = {
					NOT = { has_civic = civic_memory_vault }
					has_paragon_dlc = yes
				}
				force_add_civic = civic_memory_vault
			}
			else_if = { # Compare with prescipted empire design
				limit = {
					NOT = { has_civic = civic_byzantine_bureaucracy }
					has_megacorp = yes
				}
				force_add_civic = civic_merchant_guilds
			}
			else_if = { # Compare with prescipted empire design
				limit = {
					NOT = { has_civic = civic_catalytic_processing }
					has_plantoids = yes
				}
				force_add_civic = civic_catalytic_processing
			}
			else_if = { # Compare with prescipted empire design
				limit = {
					NOT = { has_civic = civic_dark_consortium }
					has_astral_planes_dlc = yes
				}
				force_add_civic = civic_dark_consortium
			}
			else_if = { # Compare with prescipted empire design
				limit = {
					NOT = { has_civic = civic_technocracy }
					# is_materialist = yes # Otherwise invalid
				}
				force_add_civic = civic_technocracy
			}
			else_if = { # Compare with prescipted empire design
				limit = {
					NOT = { has_civic = civic_meritocracy }
					# OR = { is_democracy = yes is_oligarchy = yes } # Otherwise invalid
				}
				force_add_civic = civic_meritocracy
			}
			if = { # Compare with prescipted empire design
				limit = {
					NOR = {
						has_civic = civic_memorialist
						has_civic = civic_fanatic_purifiers
						has_civic = civic_relentless_industrialists
						has_civic = civic_corporate_relentless_industrialists
						is_gestalt = yes
						is_megacorp = yes
					}
					OR = { is_ai = yes has_necroids = yes }
				}
				force_add_civic = civic_memorialist
			}

			country_event = { id = aagrimstarts.12 }
			set_country_flag = human_empire
		}
		else_if = { # Setup Black Legion (Chaos Undevided)
			limit = { OR = { has_origin = origin_fallen_psionic has_country_flag = eyechaos_empire } }
			give_technology = { message = no tech = tech_shields_2 }
			give_technology = { message = no tech = tech_ship_armor_2 }
			give_technology = { message = no tech = tech_sensors_2 }
			give_technology = { message = no tech = tech_thrusters_2 }
			give_technology = { message = no tech = tech_starbase_1 }
			give_technology = { message = no tech = tech_mining_1 }
			give_technology = { message = yes tech = tech_psionic_theory }		# Tier 3
			give_technology = { message = no tech = null_void_beam } # tech_vanulaser_1 ?
			give_technology = { message = no tech = tech_power_plant_2 }
			give_technology = { message = no tech = tech_automated_exploration }
			give_technology = { tech = tech_rare_crystals message = yes }
			give_technology = { tech = tech_mine_rare_crystals message = yes }
			add_research_option = tech_telepathy
			add_basic_resources_effect = { VALUE = 500 }
			add_manufactured_resources_effect = { VALUE = 500 } # alloys = 500 consumer_goods = 500
			add_advanced_resources_effect = { VALUE = 150 } # Needed rare_crystals for building_citadel_of_faith
			add_resource = { unity = 150 influence = 150 }
			ruler = {
				add_skill_without_trait_selection = 3
				if = {
					limit = { NOT = { has_trait = leader_trait_psionic } }
					add_trait_no_notify = leader_trait_psionic
				}
			}
			owner_main_species = {
				if = {
					limit = { NOT = { has_trait = trait_heretic_astartes } }
					change_species_characteristics = { add_trait = trait_heretic_astartes add_traits_at_start_of_list = yes can_change_leader = yes }
				}
			}
			event_target:capital_planet = {
				clear_deposits = yes
				if = {
					limit = { planet_size < 25 }
					set_planet_size = 25
				}
				add_deposit = d_collapsed_spire
				remove_building = building_research_lab_1
				remove_building = building_factory_1
				add_building = building_fe_dome
				add_building = building_empyrean_shrine
				add_deposit = d_abandoned_mining_tunnels
				add_deposit = d_immense_solar_array
				# add_deposit = d_communal_datacore
				# add_deposit = d_legiones_traitors
				add_deposit = d_ancient_reactor_pits
				add_deposit = d_crumbling_mining_tunnels
				add_district_and_planet_size_if_needed_effect = { district = district_city }
				while = { count = 2
					add_district_and_planet_size_if_needed_effect = { district = district_farming }
					add_district_and_planet_size_if_needed_effect = { district = district_mining }
					add_district_and_planet_size_if_needed_effect = { district = district_generator }
				}
				add_deposit = d_former_relic_world
				add_building = building_system_capital
				# add_deposit = d_city_archives
				# add_deposit = d_ritual_site
				# add_deposit = d_production_datacore
				# add_building = "building_Black_Legion_fortress_monastery"
				# add_building = chaos_undivided
				# add_building = building_mausoleum
				# add_building = generatorium
				# add_building = generatorium
				# add_building = manufactorium
				# add_deposit = d_legiones_traitors
				# add_deposit = d_legiones_traitors
				# add_deposit = d_primarchs_shrine
				# add_deposit = d_imperium_searing_desert
				# add_deposit = d_imperium_noxious_swamp
				# add_deposit = d_salvaged_reactor_pits
				# add_deposit = d_imperium_ore_rich_caverns
				# add_deposit = d_metal_salvageyard
				# add_deposit = d_grim_toxic_kelp
				# add_deposit = d_grim_noxious_swamp
				# add_deposit = d_grim_fungal_caves
				# add_deposit = d_grim_ore_rich_caverns
				# add_deposit = d_grim_searing_desert
				# add_deposit = d_imperium_fungal_caves
				# add_deposit = d_imperium_marvelous_oasis
				# add_deposit = d_imperium_marvelous_oasis
				# add_deposit = d_derelict_mining_tunnels
				# add_deposit = d_imperium_deep_sinkhole
				generate_start_deposits_and_blockers = yes
				generate_start_buildings_and_districts = yes
				set_planet_flag = legionhomeworld
				create_pop = { species = owner_main_species ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } count = 8 } # 21 too much
				# TODO test sector exists
				sector = { set_name = NAME_eyechaos }
				create_cluster = { id = NAME_eyechaos center = solar_system radius = 30 }

				## Galactic Doorstep - Setup - Copy from origin.1001
				solar_system = {
					spawn_megastructure = {
						name = "NAME_Galactic_Doorstep"
						type = "gateway_ruined"
						random_pos = yes
						orbit_angle = 360
						init_effect = { set_megastructure_flag = doorstep_gateway@root save_event_target_as = doorstep_gateway }
					}
					set_star_flag = abandoned_gateway
					random_fleet_in_system = {
						limit = { is_owned_by = root }
						weights = { base = 1
							modifier = { add = 50 is_ship_class = shipclass_science_ship }
						}
						random_owned_ship = {
							fire_on_action = { on_action = on_entering_system_first_time scopes = { from = prevprev fromfrom = root } }
						}
						root = { fire_on_action = { on_action = on_system_survey scopes = { from = prevprev fromfrom = prev.fleet } } }
					}
					root = {
						if = {
							limit = { NOT = { has_country_flag = encountered_first_gateway } }
							set_country_flag = encountered_first_gateway
							add_seen_bypass_type = gateway
							if = {
								limit = { is_ai = yes }
								give_tech_no_error_effect = { MESSAGE = yes TECH = tech_hyper_drive_3 } # Tier 3
								# give_tech_no_error_effect = { MESSAGE = yes TECH = tech_physics_3 } # Tier 4
								add_tech_option_or_research_effect = {
									TECH = tech_gateway_activation # Tier 4 prerequisites = { "tech_hyper_drive_3" "tech_physics_3" }
									PROGRESS = 0.02
									CATEGORY = physics_research
								}
							}
						}
					}
				}
			}

			country_event = { id = origin.1000 days = 300 random = 30 } # Simulate origin_galactic_doorstep
			create_fleet = {
				set_take_point = yes
				effect = {
					set_owner = prev
					while = { count = 3
						create_ship = { name = random random_existing_design = corvette }
					}
					set_location = prev.capital_star
				}
			}
			if = { # Compare with prescipted empire design
				limit = {
					graphical_culture = mammalian_01
					OR = { is_ai = yes has_paragon_dlc = yes }
				}
				set_graphical_culture = nemesis_01
				set_city_graphical_culture = nemesis_01
			}
			set_country_flag = eyechaos_empire
			country_event = { id = aagrimstarts.2002 days = 2 } # relations
		}
		else_if = { # Fallback Chaos
			limit = { has_country_flag = chaos_empire }
			country_event = { id = aagrimstarts.2002 days = 2 } # relations
		}
		else_if = { # Fallback Genestealer (TODO)
			limit = {
				has_country_flag = tyranid_empire
				owner_main_species = {
					OR = {
						is_species_class = "Genestealer"	# Compat Mod "WH species"
						species_portrait = "Genestealer"	# Compat Mod "WH species"
						is_species = "Genestealer"
					}
				}
			}
			country_event = { id = aagrimstarts.10 }
		}
		else_if = {
			limit = {
				OR = {
					has_origin = origin_godruler	# Mankind
					# has_country_flag = human_empire	# Fallback Humans
					has_country_flag = the_mankind	# Fallback Humans
					AND = {
						exists = ruler
						ruler.species = { species_portrait = "IMP_Emperor_ruler" }
					}
					AND = { is_ai = no has_civic = civic_imperial_navy }
					# is_species = PRESCRIPTED_species_name_mankind
				}
			}
			add_resource = {
				energy = 600
				minerals = 700
				food = 500
				alloys = 400
				consumer_goods = 400
				influence = 150
				unity = 200
			}
			# Look for an established system colony
			solar_system = {
				random_system_planet = {
					limit = {
						NAND = { exists = event_target:capital_planet is_planet = event_target:capital_planet is_colony = yes }
						is_colonizable = yes
					}
					weights = { base = 1
						modifier = { add = 50
							OR = {
								merg_is_relic_world = yes
								is_planet_class = pc_continental
								merg_is_gaia_basic = yes
								is_ideal_planet_class = { who = root status = yes }
							}
						}
					}
					create_colony = { owner = root }
					generate_start_deposits_and_blockers = yes
					clear_blockers = yes
					generate_start_buildings_and_districts = yes
					generate_start_pops = yes
				}
			}
			if = {
				limit = { has_origin = origin_godruler }
				country_event = { id = aagrimstarts.1 }
			}
			else = {
				country_event = { id = aagrimstarts.2001 days = 2 } # relations
			}
		}
		else = { # non_grimdark_empire
			set_timed_country_flag = { flag = non_grimdark_empire days = 2 }
		}
		if = { # All Grimdark empires should be aware of alien life
			limit = { NOT = { has_country_flag = non_grimdark_empire } }
			set_country_flag = has_encountered_other_empire
			set_country_flag = encountered_first_primitive
			set_country_flag = first_contact_event
			set_country_flag = first_alien_life
			set_country_flag = Story1
			set_country_flag = Story2 # Already encountered spacefarers
			set_country_flag = Story3
			set_country_flag = Story4
			set_country_flag = Story5
			set_country_flag = Story6
			set_country_flag = Story7
		}
		else = { remove_country_flag = non_grimdark_empire }
		set_update_modifiers_batch = end
	}
}

## Setup godruler (on_game_start)
country_event = {
	id = aagrimstarts.1
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_origin = origin_godruler }
	immediate = {
		set_update_modifiers_batch = begin
		ruler = { save_event_target_as = godruler }
		clone_leader = {
			target = ruler
			# class =
			skill = 3
			# set_age = 1001
			# event_leader = yes
			immortal = yes
			hide_age = yes
			can_manually_change_location = no
			can_assign_to_council = yes
			hide_leader = yes
			randomize_traits = no
			effect = { save_event_target_as = godruler }
			# custom_description = <key>
			# custom_catch_phrase = <string>
			# skip_background_generation = yes
			# background_planet = <target>
			# background_job = <key>
			# background_ethic = <key>
		}
		event_target:godruler = {
			add_skill_without_trait_selection = 4
			add_trait_no_notify = leader_trait_chosen
			add_trait_no_notify = leader_trait_psionic
			set_leader_flag = leader_death_events_blocked
			set_immortal = yes
			freeze_leader_age = yes
			# set_age = 1001
			if = {
				limit = { root = { is_ai = yes has_paragon_dlc = yes } }
				add_trait_no_notify = leader_trait_legendary_leader
				add_trait_no_notify = leader_trait_governor_psionic_communion
				add_trait_no_notify = leader_trait_the_genetic_luminary # 100 food
				set_leader_flag = paragon_origin_legendary_leader
				paragon_origin_legendary_leader_trait_giver = yes
			}
			# change_leader_portrait = IMP_Emperor_ruler # event_target:godruler
		}
		ruler = {
			unassign_leader = this
			exile_leader_as = godruler
			kill_leader = { show_notification = no }
		}
		assign_leader = event_target:godruler
		event_target:godruler = {
			if = { # Too much costs for start
				limit = { has_trait = leader_trait_the_genetic_luminary }
				root = {
					if = {
						limit = { is_ai = no }
						add_modifier = { modifier = copy_food_income_modifier mult = 100 } # Compensate food costs
					}
					else = {
						add_modifier = { modifier = larionessi_resurgence_modifier } # Compensate costs
					}
				}
			}
		}
		give_technology = { message = no tech = tech_ascension_theory }
		give_technology = { message = no tech = tech_planetary_unification }
		get_capital_planet = yes
		event_target:capital_planet = {
			# aaogr_initialize
			while = {
				limit = { has_district = district_generator }
				remove_district = district_generator
			}
			while = {
				limit = { has_district = district_mining }
				remove_district = district_mining
			}
			while = {
				limit = { has_district = district_farming }
				remove_district = district_farming
			}
			while = {
				limit = { has_district = district_city }
				remove_district = district_city
			}
			# TODO !?
			set_planet_flag = pf_hide_city
			set_planet_flag = pf_no_generator_districts
			set_planet_flag = pf_no_mining_districts
			set_planet_flag = pf_no_industrial_districts
			set_planet_flag = pf_hide_farming
			set_planet_flag = legionhomeworld
			remove_building = building_factory_1
			remove_building = building_foundry_1
			remove_building = building_temple
			remove_building = building_temple
			remove_building = building_research_lab_1
			remove_building = building_bureaucratic_1
			remove_building = building_capital

			add_building = building_system_capital_gr
			add_district = district_arcology_housing
			add_district = district_arcology_manufactorum
			add_district = district_arcology_corpsestarch
			add_district = district_arcology_corpsestarch
			add_building = building_bureaucratic_1_gr
			add_building = building_bureaucratic_1_gr
			add_building = building_precinct_house_gr
			add_building = building_research_lab_1_gr
			add_building = building_foundry_1_gr
			add_building = building_temple_gr
			add_building = building_temple_gr
			add_building = building_fortress_gr
			clear_deposits = yes
			add_deposit = d_holyterra_sprawl
			add_deposit = d_holyterra_sprawl
			add_deposit = d_holyterra_sprawl
			add_deposit = d_holyterra_defences
			add_deposit = d_holyterra_defences
			validate_planet_buildings_and_districts = yes

			owner_main_species = { save_event_target_as = secondary_species }
			if = {
				limit = { NOT = { exists = event_target:sol_system_earth } }
				save_global_event_target_as = sol_system_earth
			}
			if = {
				limit = {
					any_galaxy_species = {
						NOR = { is_exact_same_species = root.owner_main_species has_trait = trait_daemons has_trait = trait_heretic_astartes }
						is_species_class = HUM
						is_human_species = yes
					}
				}
				random_galaxy_species = {
					limit = {
						NOR = { is_exact_same_species = root.owner_main_species has_trait = trait_daemons has_trait = trait_heretic_astartes }
						is_species_class = HUM
						is_human_species = yes
					}
					save_event_target_as = secondary_species
				}
			}
			else = {
				create_species = {
					name = NAME_Human
					plural = NAME_Human_plural
					class = "HUM"
					namelist = "HUMAN3"
					portrait = "human_legacy"
					traits = random
					homeworld = event_target:sol_system_earth
					effect = { save_event_target_as = secondary_species }
				}
			}

			# "Legio Custodes"
			if = {
				limit = {
					has_global_flag = WHspecies_installed
					owner_main_species = { NOT = { has_trait = trait_adeptus_custodes } }
				}
				create_species = {
					name = "SPEC_Adeptus_Custodes"
					plural = "SPEC_Adeptus_Custodes_pl"
					class = "HUM"
					namelist = "Adeptus_Custodes"
					portrait = "Adeptus_Custodes"
					homeworld = event_target:sol_system_earth
					traits = {
						trait="trait_adeptus_custodes"
						trait="trait_perfected_genes"
						trait="trait_humanoid_existential_iteroparity"
						trait="trait_wasteful"
						trait="trait_solitary"
						# trait="trait_latent_psionic"
					}
					immortal = yes
					# can_be_modified = no
					gender = male
					# clear_parent_species_link = yes
					allow_negative_traits = no
					extra_trait_points = 2
				}
				last_created_species = {
					root.capital_scope = {
						create_pop = { species = prevprev count = 3 ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } }
						owner_main_species = { set_species_identity = prevprev }
					}
				}
			}
			else = {
				modify_species = {
					species = event_target:secondary_species
					base = none # event_target:secondary_species
					add_trait = trait_functional
					add_traits_at_start_of_list = yes
					ideal_planet_class = prev
					change_scoped_species = no
					effect = {
						save_event_target_as = secondary_species
						prev = {
							while = { count = 3
								random_owned_pop = {
									limit = { is_exact_same_species = root.owner_main_species }
									change_species = prevprev
								}
							}
							while = {
								limit = { num_sapient_pops < 46 } # 57
								create_pop = { species = prev ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } }
								random_owned_pop = {
									limit = { is_exact_same_species = root.owner_main_species }
									change_species = prevprev
								}
							}
						}
						set_species_identity = root.owner_main_species
						set_citizenship_type = { country = root type = citizenship_limited cooldown = yes } # Residence
					}
				}
			}
		}
		if = {
			limit = { is_authoritarian = no }
			shift_ethic = ethic_authoritarian
		}
		if = {
			limit = { is_spiritualist = no } # Needed for setting policy
			shift_ethic = ethic_spiritualist
		}
		if = {
			limit = { is_spiritualist = yes is_authoritarian = yes NOR = { is_gestalt = yes has_civic = civic_imperial_cult } }
			force_add_civic = civic_imperial_cult
		}

		# remove_country_flag = synth_physical
		# remove_country_flag = synth_virtual

		if = {
			limit = { NOT = { has_policy_flag = robots_outlawed } can_set_policy = { policy = robot_pop_policy option = robot_pops_outlawed } }
			set_policy = { policy = robot_pop_policy option = robot_pops_outlawed cooldown = yes }
		}

		if = {
			limit = { NOT = { has_policy_flag = ai_outlawed } can_set_ai_policy = yes can_set_policy = { policy = artificial_intelligence_policy option = ai_outlawed } }
			set_policy = { policy = artificial_intelligence_policy option = ai_outlawed cooldown = yes }
		}
		else = {
			set_country_flag = synthetic_empire
			if = {
				limit = { NOT = { has_policy_flag = ai_servitude } can_set_ai_policy = yes can_set_policy = { policy = artificial_intelligence_policy option = ai_servitude } }
				set_policy = { policy = artificial_intelligence_policy option = ai_servitude cooldown = yes }
			}
			remove_country_flag = synthetic_empire
		}

		set_country_flag = human_empire
		set_update_modifiers_batch = end
		country_event = { id = aagrimstarts.2001 days = 2 } # relations
	}
}

## setup_shroudrage (on_game_start)
country_event = {
	id = aagrimstarts.3
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_origin = origin_shroudrage }
	immediate = {
		give_technology = { message = no tech = tech_gene_seed_purification }
		give_technology = { message = no tech = tech_penal_colonies }
		get_capital_planet = yes
		event_target:capital_planet = {
			add_deposit = d_ore_rich_caverns
			add_deposit = d_ore_rich_caverns
			add_deposit = d_fungal_caves
			add_deposit = d_fungal_caves
			add_deposit = d_searing_desert
			# add_district = district_mining
			add_district_and_planet_size_if_needed_effect = { district = district_farming }
			add_deposit = d_decrepit_dwellings
			create_pop = { species = owner_species count = 6 ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } }
			remove_building = building_research_lab_1
			add_building = building_gladiatorarena
		}
		# grim_extra_corvettes = yes
		create_fleet = {
			set_take_point = yes
			effect = {
				set_owner = root
				while = { count = 2
					create_ship = { name = random random_existing_design = corvette }
				}
				set_location = root.capital_star.starbase
			}
		}
		every_owned_leader = {
			limit = {
				NOR = { leader_class = scientist species = { has_trait = trait_very_strong } }
			}
			modify_species = { add_trait = trait_very_strong }
		}
		set_country_flag = chaos_empire
		country_event = { id = aagrimstarts.2002 days = 2 } # relations
	}
}

### ELDAR ('Aeldari') ###
# Craftworld Eldar: The Asuryani inhabit planetoid-sized vessels known as Craftworlds.
# Dark Eldar: The Drukhari inhabit an ancient city within the Webway known as Commoragh.
# The Exodites inhabit verdant Maiden Worlds.
# Harlequins are followers of the Eldar god, the Great Harlequin (also known as Cegorach or "The Laughing God")
# The Ynnari are a new faction of Eldar. These are the followers of Ynnead (a newly awakened Eldar God) and seek to destroy Chaos.
# The other Aeldari travels the galaxy as outcasts, renegades, corsairs, and pirates known as Anhrathe, and several other groups and sub-groups exist throughout the galaxy.
# Setup origin_soulkeepers 'Eldar' void_dweller_system (on_game_start)
country_event = {
	id = aagrimstarts.7
	hide_window = yes
	is_triggered_only = yes
	# trigger = { has_origin = origin_soulkeepers }
	immediate = {
		# v.3.9.2 For most compatibility (using has_soulkeepers_origin)
		if = {
			limit = { OR = { is_ai = yes has_federations_dlc = yes } }
			set_origin = origin_void_dwellers
		}
		if = {
			limit = { NOT = { has_civic = civic_pompous_purists } }
			force_add_civic = civic_pompous_purists
		}

		log="Setup origin_soulkeepers 'Eldar' void_dweller_system "
		set_country_flag = origin_soulkeepers
		set_country_flag = eldar_empire
		set_country_flag = laser_tech

		## Craftworlds Asuryani (initializer void_dweller_system)
		save_event_target_as = void_dweller_owner
		get_capital_planet = yes
		event_target:capital_planet = { # void_dweller_home_planet_setup
			# GRIMDARK_SOULKEEPERS_HABITAT
			# if = { limit = { owner = { has_origin = origin_soulkeepers } }
			add_deposit = d_aa_infinity_circuit
			add_deposit = d_aa_infinity_circuit
			add_deposit = d_aa_shroudgate_active
			add_district_and_planet_size_if_needed_effect = { district = district_hab_housing }
			add_district = { district_type = district_hab_energy ignore_cap = yes }
			add_district = { district_type = district_hab_industrial ignore_cap = yes }
			# create_pop = { species = prev.owner_species count = 3 }
			add_building = building_shaper_shrine
			add_building = building_hydroponics_farm

			if = {
				limit = { owner = { is_lithoid_empire = no } }
				add_building = building_bureaucratic_1
				add_building = building_hydroponics_farm
			}
			else = { add_building = building_holo_theatres }
			# GRIMDARK_SOULKEEPERS_HABITAT END
			# From < v.3.9
			# if = { limit = { owner = { has_origin = origin_soulkeepers } }
			solar_system = {
				if = {
					limit = { num_guaranteed_colonies > 0 }
					random_system_planet = {
						limit = { has_planet_flag = habitat_2_planet }
						set_planet_flag = has_megastructure
						random_fleet_in_orbit = {
							limit = {
								is_ship_class = shipclass_habitat_station
								is_ship_size = major_orbital_resource
								# has_fleet_flag = mining_orbital
							}
							# spawn_megastructure = {
							prevprev = {
								spawn_planet = {
									class = "pc_habitat"
									location = prevprev
									orbit_location = yes
									orbit_angle_offset = 135
									size = 6
									has_ring = no
									deposit_blockers = none
									flags = { void_dweller_habitat_2 megastructure habitat mining_habitat }
									init_effect = {
										set_name = prevprev
										set_planet_entity = { entity = "habitat_phase_02_entity" graphical_culture = event_target:void_dweller_owner }
										set_surveyed = { surveyed = yes surveyor = event_target:void_dweller_owner }
										set_all_comms_surveyed = yes
										set_planet_flag = habitat_level_1
										set_planet_flag = advanced_habitat
										save_event_target_as = target_habitat
									}
								}
							}
							# delete_fleet = this
							set_location = { target = prev }
						}
						event_target:target_habitat = {
							set_owner = event_target:void_dweller_owner
							if = {
								limit = { OR = { event_target:void_dweller_owner = { is_ai = yes } is_difficulty < 5 } }
								if = {
									limit = { owner = { is_eager_explorer_empire = no } }
									create_pop = { species = owner_species count = 3 }
								}
								create_pop = { species = owner_species count = 1 }
							}
							prev = { set_planet_flag = habitat@PREV }
							set_planet_flag = mining_habitat
							add_district_and_planet_size_if_needed_effect = { district = district_hab_housing }
							add_district_and_planet_size_if_needed_effect = { district = district_hab_mining }
							if = {
								limit = {
									owner = {
										OR = { is_lithoid_empire = no is_catalytic_empire = yes }
									}
								}
								add_building = building_hydroponics_farm
								add_district_and_planet_size_if_needed_effect = { district = district_hab_energy } # district_hab_commercial
							}
							else = {
								add_building = building_commercial_zone
								add_district_and_planet_size_if_needed_effect = { district = district_hab_mining }
							}
							add_deposit = d_aa_infinity_circuit # grimdark_soulkeepers_circuit
							start_colony = { owner = event_target:void_dweller_owner }
							set_colony_type = col_habitat_mining
						}
					}
				}
				if = {
					limit = {
						OR = {
							event_target:void_dweller_owner = { is_ai = yes }
							is_difficulty < 4
						}
						num_guaranteed_colonies > 1
					}
					random_system_planet = {
						limit = { has_planet_flag = habitat_3_planet }
						set_planet_flag = has_megastructure
						random_fleet_in_orbit = {
							limit = {
								is_ship_class = shipclass_habitat_station
								is_ship_size = major_orbital_resource
								# has_fleet_flag = energy_orbital
							}
							prevprev = {
								# Too powerfull!?
								# spawn_planet = {
								# 	class = "pc_habitat"
								# 	location = prevprev
								# 	orbit_location = yes
								# 	orbit_angle_offset = 135
								# 	size = 6
								# 	has_ring = no
								# 	deposit_blockers = none
								# 	flags = { void_dweller_habitat_3 megastructure habitat energy_habitat }
								# 	init_effect = {
								# 		set_name = prevprev
								# 		set_planet_entity = { entity = "habitat_phase_02_entity" graphical_culture = event_target:void_dweller_owner }
								# 		set_surveyed = { surveyed = yes surveyor = event_target:void_dweller_owner }
								# 		set_all_comms_surveyed = yes
								# 		set_planet_flag = habitat_level_1
								# 		# set_planet_flag = advanced_habitat
								# 		save_event_target_as = target_habitat
								# 	}
								# }
								spawn_megastructure = {
									type = habitat_central_complex_ruined
									owner = event_target:void_dweller_owner
									planet = prevprev
									coords_from = prev
								}
							}
							# delete_fleet = this
							set_location = { target = prev }
						}
						# Too powerfull!?
						# event_target:target_habitat = {
						# 	set_owner = event_target:void_dweller_owner
						# 	if = {
						# 		limit = { owner = { is_eager_explorer_empire = no } }
						# 		create_pop = { species = owner_species count = 3 }
						# 	}
						# 	create_pop = { species = owner_species }
						# 	prev = { set_planet_flag = habitat@PREV }
						# 	set_planet_flag = energy_habitat
						# 	add_district_and_planet_size_if_needed_effect = { district = district_hab_housing }
						# 	add_district_and_planet_size_if_needed_effect = { district = district_hab_energy }
						# 	add_district_and_planet_size_if_needed_effect = { district = district_hab_energy } # district_hab_commercial
						# 	if = {
						# 		limit = { owner = { is_lithoid_empire = no } }
						# 		add_building = building_hydroponics_farm
						# 	}
						# 	else_if = {
						# 		limit = { owner = { is_lithoid_empire = yes is_spiritualist = no } }
						# 		add_building = building_bureaucratic_1
						# 	}
						# 	else_if = {
						# 		limit = { owner = { is_lithoid_empire = yes is_spiritualist = yes } }
						# 		if = {
						# 			limit = { owner = { NOT = { has_civic = civic_death_cult } } }
						# 			add_building = building_temple
						# 		}
						# 		if = {
						# 			limit = {
						# 				owner = {
						# 					OR = { has_valid_civic = civic_death_cult has_valid_civic = civic_death_cult_corporate }
						# 				}
						# 			}
						# 			add_building = building_sacrificial_temple_1
						# 		}
						# 	}
						# 	if = {
						# 		limit = { owner = { has_valid_civic = civic_permanent_employment } }
						# 		while = { count = 4
						# 			random_owned_pop = {
						# 				limit = {
						# 					OR = {
						# 						has_job = clerk
						# 						has_job = technician
						# 						has_job = miner
						# 						has_job = farmer
						# 					}
						# 					is_robotic_species = no
						# 				}
						# 				modify_species = {
						# 					add_trait = trait_zombie
						# 					add_traits_at_start_of_list = yes
						# 				}
						# 				if = {
						# 					limit = { has_trait = trait_syncretic_proles }
						# 					modify_species = { remove_trait = trait_syncretic_proles }
						# 				}
						# 			}
						# 		}
						# 	}
						# 	add_district = district_hab_housing
						# 	add_district = { district_type = district_hab_energy ignore_cap = yes }
						# 	add_deposit = d_aa_infinity_circuit # grimdark_soulkeepers_circuit
						# 	add_building = building_bureaucratic_1 # grimdark_soulkeepers_bureau
						# }
					}
				}
			}
			while = { count = 8
				limit = { num_sapient_pops > 25 }
				random_owned_pop = {
					weights = { base = 1
						modifier = { add = 6 is_unemployed = yes }
					}
					kill_pop = yes
				}
			}
		}

		give_tech_no_error_effect = { MESSAGE = no TECH = tech_starbase_2 }	# Tier 0
		give_tech_no_error_effect = { MESSAGE = no TECH = tech_eco_simulation }
		give_tech_no_error_effect = { MESSAGE = no TECH = tech_hydroponics }
		give_tech_no_error_effect = { MESSAGE = no TECH = tech_hyper_drive_2 }	# Tier 2
		# give_technology = { message = no tech = tech_physics_1 }			# Tier 2
		give_technology = { message = no tech = tech_sensors_2 }			# Tier 2
		# give_tech_no_error_effect = { TECH = tech_society_1 MESSAGE = yes }		# Tier 2
		# give_tech_no_error_effect = { TECH = tech_society_2 MESSAGE = yes }		# Tier 3			# Tier 3
		give_tech_no_error_effect = { MESSAGE = no TECH = tech_space_mining_1 }
		give_technology = { tech = "tech_mine_zro" message = yes }
		give_technology = { message = no tech = "tech_rare_crystals" }
		give_technology = { tech = "tech_mine_rare_crystals" message = yes }
		# give_technology = { tech = "tech_mine_volatile_motes" message = yes }
		# give_technology = { tech = "tech_mine_exotic_gases" message = yes }
		# give_technology = { message = no tech = tech_engineering_1 }		# Tier 2
		give_technology = { message = no tech = tech_starbase_3 }			# Tier 2
		# give_technology = { message = no tech = tech_engineering_2 }		# Tier 3
		give_tech_no_error_effect = { MESSAGE = no TECH = tech_habitat_1 }	# Tier 3
		give_technology = { message = no tech = tech_experimental_subspace_navigation }	# Tier 2
		if = {
			limit = { OR = { is_ai = yes has_overlord_dlc = yes } }
			add_research_option = tech_hyper_relays	# Tier 2
			# give_tech_no_error_effect = { MESSAGE = no TECH = tech_hyper_relays }	# Tier 2
		}
		add_research_option = tech_habitat_2		# Tier 4
		# Maybe too powerful!?
		if = {
			limit = { is_ai = yes }
			# give_technology = { message = no tech = tech_physics_2 }		# Tier 3
			give_technology = { message = no tech = tech_sensors_3 }		# Tier 3
			give_technology = { message = no tech = tech_telepathy }		# Tier 3
			# give_technology = { message = no tech = tech_society_3 }		# Tier 4
		}
		else = {
			# add_research_option = tech_physics_2		# Tier 3
			add_research_option = tech_sensors_3		# Tier 3
			add_research_option = tech_telepathy		# Tier 3
			# add_research_option = tech_society_3		# Tier 4
		}

		add_research_option = tech_precognition_interface # Tier 4 prerequisites = { "tech_telepathy" "tech_society_3" }
		# add_research_option = tech_society_4		# Tier 5
		add_research_option = tech_psi_jump_drive_1	# Tier 5 prerequisites = { "tech_precognition_interface" "tech_society_4" }

		# create_remote_shroudgate_planet
		while = { count = 3
			random_system = {
				limit = {
					starting_system = no
					has_special_star_flag_trigger = no
					any_system_planet = {
						is_colonizable = yes
						NOR = { is_colony = yes exists = owner has_deposit = d_aa_shroudgate_inactive }
					}
				}
				create_nearby_shroudgate_planet = yes
			}
		}

		if = {
			limit = {
				OR = { is_ai = yes has_utopia = yes }
				NOT = { has_tradition = tr_psionics_adopt }
			}
			add_tradition = tr_psionics_adopt
		}

		# if = {
		# 	limit = {
		# 		is_ai = yes
		# 		NOT = { has_tradition = tr_genetics_finish }
		# 		has_genetic_ascension = yes
		# 		has_technology = tech_gene_tailoring
		# 	}
		# 	add_tradition = tr_genetics_adopt
		# 	add_tradition = tr_genetics_resequencing
		# }
		if = {
			limit = {
				is_ai = yes
				NOT = { has_tradition = tr_prosperity_adopt }
			}
			add_tradition = tr_prosperity_adopt
			add_tradition = tr_prosperity_sct
			add_tradition = tr_prosperity_public_works
		}

		every_owned_species = {
			limit = { NOT = { has_trait = trait_pc_habitat_preference } }
			root = {
				modify_species = {
					species = prev
					base = prev
					add_trait = trait_pc_habitat_preference
					add_traits_at_start_of_list = yes
				}
			}
		}
		every_owned_leader = {
			limit = { NOT = { has_trait = leader_trait_psionic } }
			add_trait_no_notify = leader_trait_psionic
		}
		every_pool_leader = {
			limit = { NOT = { has_trait = leader_trait_psionic } }
			add_trait_no_notify = leader_trait_psionic
		}
		ruler = {
			if = {
				limit = { NOT = { has_trait = leader_trait_chosen } }
				add_trait_no_notify = leader_trait_chosen
			}
			if = {
				limit = { NOT = { has_trait = leader_trait_expertise_psionics } }
				add_trait_no_notify = leader_trait_expertise_psionics
			}
			# leader_trait_type = veteran
			if = {
				limit = { NOT = { has_trait = leader_trait_cultural_focus } }
				add_trait_no_notify = leader_trait_cultural_focus
			}
		}
		country_event = { id = origin.1001 } # Fake origin_galactic_doorstep

		event_target:capital_planet = {
			if = {
				limit = { planet_size < 8 }
				set_planet_size = 8
			}
			set_planet_flag = void_dweller_habitat_1
			validate_planet_buildings_and_districts = yes
			every_owned_pop = { clear_pop_category = yes }
			set_colony_type = col_capital
			solar_system = {
				## Galactic Doorstep - Setup - Copy from origin.1001
				# spawn_megastructure = {
				# 	name = "NAME_Galactic_Doorstep"
				# 	type = "gateway_ruined"
				# 	random_pos = yes
				# 	orbit_angle = 360
				# 	init_effect = { set_megastructure_flag = doorstep_gateway@root save_event_target_as = doorstep_gateway }
				# }
				# survey_every_neighbor_system
				every_neighbor_system = {
					# survey_every_planet_in_system
					every_system_planet = {
						set_surveyed = { surveyed = yes surveyor = root }
					}
				}
				# create_net_shroudgate_planets
				closest_system = {
					limit = {
						any_system_planet = {
							is_colonizable = yes
							NOR = { is_colony = yes has_deposit = d_aa_shroudgate_inactive }
						}
					}
					max_steps = 6
					create_nearby_shroudgate_planet = yes
					closest_system = {
						limit = {
							any_system_planet = {
								is_colonizable = yes
								NOR = { is_colony = yes has_deposit = d_aa_shroudgate_inactive }
							}
						}
						max_steps = 10
						create_nearby_shroudgate_planet = yes
						closest_system = {
							limit = {
								any_system_planet = {
									is_colonizable = yes
									NOR = { is_colony = yes has_deposit = d_aa_shroudgate_inactive }
								}
							}
							max_steps = 15
							create_nearby_shroudgate_planet = yes
						}
						closest_system = {
							limit = {
								any_system_planet = {
									is_colonizable = yes
									NOR = { is_colony = yes has_deposit = d_aa_shroudgate_inactive }
								}
							}
							max_steps = 25
							create_nearby_shroudgate_planet = yes
						}
						closest_system = {
							limit = {
								any_system_planet = {
									is_colonizable = yes
									NOR = { is_colony = yes has_deposit = d_aa_shroudgate_inactive }
								}
							}
							max_steps = 50
							create_nearby_shroudgate_planet = yes
							closest_system = {
								limit = {
									any_system_planet = {
										is_colonizable = yes
										NOR = { is_colony = yes has_deposit = d_aa_shroudgate_inactive }
									}
								}
								max_steps = 50
								create_nearby_shroudgate_planet = yes
							}
						}
					}
				}
				random_fleet_in_system = {
					limit = { is_owned_by = root }
					weights = { base = 1
						modifier = { add = 50 is_ship_class = shipclass_science_ship }
					}
					random_owned_ship = {
						fire_on_action = { on_action = on_entering_system_first_time scopes = { from = prevprev fromfrom = root } }
						if = {
							limit = { is_ship_size = science }
							if = {
								limit = { owner = { is_ai = yes } }
								set_ship_design = { design = "NAME_From_Beyond_Ship_Cloak" }
							}
							else = {
								set_ship_design = { design = "NAME_From_Beyond_Ship" }
							}
							fleet = {
								set_fleet_settings = { can_upgrade = no spawn_debris = no }
							}
						}
					}
					root = { fire_on_action = { on_action = on_system_survey scopes = { from = prevprev fromfrom = prev.fleet } } }
				}
			}
		}
		# add_research_option = tech_psionic_theory
		give_technology = { message = yes tech = tech_psionic_theory }		# Tier 3
		if = {
			limit = { NOT = { has_country_flag = encountered_first_gateway } }
			set_country_flag = encountered_first_gateway
			add_seen_bypass_type = gateway
			if = {
				limit = { is_ai = yes }
				give_tech_no_error_effect = { MESSAGE = yes TECH = tech_hyper_drive_3 } # Tier 3
				# give_tech_no_error_effect = { MESSAGE = yes TECH = tech_physics_3 } # Tier 4
				add_tech_option_or_research_effect = {
					TECH = tech_gateway_activation # Tier 4 prerequisites = { "tech_hyper_drive_3" "tech_physics_3" }
					PROGRESS = 0.02
					CATEGORY = physics_research
				}
			}
		}

		if = {
			limit = {
				any_owned_fleet = { is_ship_size = constructor }
				count_owned_fleet = {
					limit = {
						is_ship_class = shipclass_constructor
						any_owned_ship = { has_component = PSI_JUMP_DRIVE_1 }
					}
					count = 0
				}
			}
			random_owned_fleet = {
				limit = { is_ship_size = constructor }
				set_ship_design = { design = "NAME_Penitent" }
				set_fleet_settings = { can_upgrade = no spawn_debris = no }
			}
		}
	}
}

## Dark Eldar "Drukhari Regime"
## setup_paindrinkers (on_game_start)
country_event = {
	id = aagrimstarts.8
	hide_window = yes
	is_triggered_only = yes
	# trigger = { has_origin = origin_paindrinkers }
	immediate = {
		give_technology = { message = no tech = tech_space_exploration }
		give_technology = { message = no tech = tech_sensors_2 }	# Tier 2
		give_technology = { message = no tech = tech_neural_implants }
		give_technology = { message = no tech = tech_morphogenetic_field_mastery }
		give_technology = { message = no tech = tech_penal_colonies }
		get_capital_planet = yes
		owner_main_species = {
			while = { count = 3 random_species_pop = { kill_pop = yes } }
			if = {
				limit = { NOT = { has_trait = trait_drukhari } }
				change_species_characteristics = { add_trait = trait_drukhari add_traits_at_start_of_list = yes can_change_leader = yes }
			}
			if = {
				limit = { NOT = { has_trait = trait_pc_desert_preference } }
				change_species_characteristics = { add_trait = trait_pc_desert_preference add_traits_at_start_of_list = yes }
			}
		}
		if = {
			limit = { NOT = { has_civic = civic_death_cult } }
			force_add_civic = civic_death_cult
		}
		random_owned_species = {
			limit = {
				is_sapient = yes
				NOT = { is_same_species = root.owner_main_species }
				num_positive_traits > 1
			}
			save_event_target_as = secondary_species
		}
		random_galaxy_species = {
			limit = {
				is_sapient = yes
				NOR = {
					is_same_species = root.owner_main_species
					is_same_species = event_target:secondary_species
					has_trait = trait_necrons
					has_trait = trait_tau
					has_trait = trait_eldar
					has_psionic_species_trait = yes
				}
				# OR = { is_species_class = "Imperium"	# Dropped backward Compat Mod "WH species"
				is_species_class = "HUM" # AND = { }
				is_human_species = yes
				num_positive_traits > 1
			}
			save_event_target_as = third_species
		}

		if = {
			limit = {
				exists = event_target:secondary_species
				event_target:secondary_species = { is_species_class = "HUM" species_portrait = "humanoid_hp_12" }
			}
			random_galaxy_species = {
				limit = {
					is_sapient = yes
					NOR = {
						is_same_species = root.owner_main_species
						is_same_species = event_target:secondary_species
						has_trait = trait_necrons
						has_trait = trait_tau
						has_trait = trait_eldar
						has_psionic_species_trait = yes
					}
					OR = {
						AND = { # Compat Mod "WH species"
							has_global_flag = WHspecies_installed
							OR = { species_portrait = "Orkz" is_species_class = "Orkz"	}
						}
						AND = { is_species_class = "HUM" species_portrait = "humanoid_hp_12" }
						# is_species_class = "Ork"	# Compat Mod "Orks species" TODO
						has_trait = "trait_orkz"
						is_species = name_list_ORK1
					}
					num_positive_traits > 1
				}
				event_target:secondary_species = { set_species_identity = prev }
				save_event_target_as = secondary_species
			}
		}
		if = {
			limit = { NOT = { exists = event_target:third_species } }
			if = {
				limit = { NOT = { exists = event_target:sol_system_earth } }
				random_system = {
					limit = { has_star_flag = sol_system }
					random_system_planet = {
						limit = { has_planet_flag = planet_earth }
						save_global_event_target_as = sol_system_earth
					}
				}
			}
			# TODO fallback NOT = { exists = event_target:sol_system_earth }
			if = {
				limit = { exists = event_target:sol_system_earth }
				create_species = {
					name = NAME_Human
					plural = NAME_Human_plural
					class = "HUM"
					namelist = "HUMAN3"
					portrait = "human"
					traits = random
					homeworld = event_target:sol_system_earth
					effect = { save_event_target_as = third_species }
				}
			}
			else = {
				random_galaxy_species = {
					limit = {
						NOR = {
							is_same_species = root.owner_main_species
							is_same_species = event_target:secondary_species
							has_trait = trait_necrons
							has_trait = trait_tau
							has_trait = trait_eldar
						}
						is_species_class = HUM
						num_positive_traits > 1
					}
					weights = { base = 1
						modifier = { add = 3 is_sapient = yes }
						modifier = { add = 6 has_psionic_species_trait = no }
						modifier = { add = 12 is_human_species = yes }
					}
					save_event_target_as = third_species
				}
			}
		}
		if = {
			limit = { NOT = { exists = event_target:third_species } }
			event_target:secondary_species = { save_event_target_as = third_species }
		}

		event_target:capital_planet = {
			solar_system = {
				spawn_natural_wormhole = { bypass_type = wormhole random_pos = yes orbit_angle = 360 }
				random_neighbor_system_euclidean = {
					limit = {
						OR = { has_owner = no is_owned_by = root }
						NOR = {
							starting_system = yes
							has_natural_wormhole = yes
							has_hyperlane_to = prev
							has_special_star_flag_trigger = yes
							any_neighbor_system = { has_owner = yes space_owner = { is_fallen_empire = yes } }
						}
					}
					# weights = { base = 1 modifier = { add = 10 has_special_star_flag_trigger = no } }
					save_event_target_as = psi_nav_system
				}
				if = {
					limit = { NOT = { exists = event_target:psi_nav_system } }
					random_neighbor_system = {
						limit = {
							OR = { has_owner = no is_owned_by = root }
							starting_system = no
							has_natural_wormhole = no
							any_neighbor_system = { NOT = { is_same_value = prevprev } }
							has_special_star_flag_trigger = no
							count_neighbor_system = { limit = { has_owner = yes space_owner = { is_fallen_empire = yes } } count = 0 }
						}
						# weights = {
						# 	base = 1
						# 	modifier = { add = 4 OR = { has_owner = no is_owned_by = root } }
						# 	modifier = { add = 10 has_special_star_flag_trigger = no }
						# }
						save_event_target_as = psi_nav_system
					}
				}
				if = {
					limit = { NOT = { exists = event_target:psi_nav_system } }
					closest_system = {
						min_steps = 2
						max_steps = 14
						limit = {
							NOR = {
								has_owner = yes
								starting_system = yes
								has_natural_wormhole = yes
								# has_hyperlane_to = prev
								has_special_star_flag_trigger = yes
								any_neighbor_system = { has_owner = yes space_owner = { is_fallen_empire = yes } }
							}
						}
						save_event_target_as = psi_nav_system
					}
				}
				event_target:psi_nav_system = {
					spawn_natural_wormhole = { bypass_type = wormhole random_pos = yes orbit_angle = 360 }
					link_wormholes = prev
					if = {
						limit = { NOT = { exists = starbase } }
						create_starbase = {
							size = starbase_starport
							# owner = root
							module = shipyard
							effect = { set_owner = root }
						}
					}
					if = {
						limit = { root = { is_ai = yes } } # To be sure
						system_event = { id = aagrimstarts.80 days = 3600 }
					}
				}
				# Do this later for AI, as the AI has problems to start with this
				if = {
					limit = { root = { is_ai = no } }
					every_neighbor_system = {
						limit = {
							any_neighbor_system = { NOT = { is_same_value = prevprev } }
							count_neighbor_system = { count > 1 }
						}
						remove_hyperlane = { from = this to = prev }
					}
				}
				random_fleet_in_system = {
					limit = { is_owned_by = root }
					weights = { base = 1
						modifier = { add = 50 is_ship_class = shipclass_science_ship }
					}
					random_owned_ship = {
						fire_on_action = { on_action = on_entering_system_first_time scopes = { from = prevprev fromfrom = root } }
						if = {
							limit = { is_ship_size = science }
							save_event_target_as = jump_drive_ship
						}
					}
					root = { fire_on_action = { on_action = on_system_survey scopes = { from = prevprev fromfrom = prev.fleet } } }
				}
				set_surveyed = { surveyed = yes surveyor = root }
				system_event = { id = aagrimstarts.80 days = 3600 }
				if = {
					limit = { prev = { has_ringworld_output_boost = yes } }
					# Copy from Shattered Ring country_event = { id = origin.3150 }
					if = {
						limit = { num_guaranteed_colonies >= 1 }
						every_megastructure = {
							limit = { exists = owner is_owned_by = root is_megastructure_type = ring_world_ruined }
							remove_megastructure = this
						}
						spawn_shattered_ring_guaranteed_1_effect = yes
						spawn_shattered_ring_guaranteed_2_effect = yes
					}
					else = {
						# limit = { num_guaranteed_colonies > 0 }
						random_megastructure = {
							limit = {
								exists = owner
								is_owned_by = root
								is_megastructure_type = ring_world_ruined
								has_megastructure_flag = guaranteed_1
							}
							remove_megastructure = this
						}
						spawn_shattered_ring_guaranteed_1_effect = yes
					}
					# TODO: Make this a special project for human player
					random_system_planet = {
						limit = {
							is_planet_class = pc_shattered_ring_habitable
							NOT = { is_planet = prevprev }
						}
						# Repair Shattered Ring: from decision_shattered_ring_project
						clear_blockers = yes # clear_deposits = yes
						change_pc = pc_ringworld_habitable
						set_planet_entity = { entity = ringworld_habitable_entity graphical_culture = owner }
						prev = {
							every_system_planet = {
								limit = { is_planet_class = pc_ringworld_tech }
								set_planet_entity = { entity = ringworld_tech_entity_01_entity graphical_culture = root }
							}
							every_system_planet = {
								limit = { is_planet_class = pc_ringworld_seam }
								set_planet_entity = { entity = ringworld_seam_entity_01_entity graphical_culture = root }
							}
						}
						# Remove Scrap Processing Buildings
						if = {
							limit = { has_building = building_mineral_purification_plant }
							remove_building = building_mineral_purification_plant
						}
						if = {
							limit = { has_building = building_mineral_purification_hub }
							remove_building = building_mineral_purification_hub
						}
						# This removes the extra districts when fixing the ring world.
						shattered_ring_world_conversion_effect = { DISTRICT = district_rw_city VARIABLE = num_housing_districts }
						shattered_ring_world_conversion_effect = { DISTRICT = district_rw_commercial VARIABLE = num_commercial_districts }
						# All empire types get farming and industrial districts
						shattered_ring_world_conversion_effect = { DISTRICT = district_rw_farming VARIABLE = num_farming_districts }
						shattered_ring_world_conversion_effect = { DISTRICT = district_rw_industrial VARIABLE = num_industrial_districts }
						if = { # Finally, bring it in line with ringworld sizes
							limit = { planet_size < 12 }
							set_planet_size = 12
						}
						set_surveyed = { surveyed = yes surveyor = root }
						start_colony = { owner = root } # species = event_target:secondary_species
						root = { set_country_flag = has_built_or_repaired_megastructure } # And set the country flag so you can take Galactic Wonders
						create_pop = { species = event_target:secondary_species ethos = { ethic = ethic_militarist } count = 2 }
						create_pop = { species = event_target:third_species count = 2 }
					}
					prev = {
						if = {
							limit = { planet_size < 14 }
							set_planet_size = 14
						}
						change_pc = pc_ringworld_habitable
						set_planet_entity = { entity = ringworld_habitable_entity graphical_culture = owner }
						add_district_and_planet_size_if_needed_effect = { district = district_rw_city }
						add_district_and_planet_size_if_needed_effect = { district = district_rw_farming }
					}
				}
			}
			remove_building = building_bureaucratic_1
			remove_building = building_research_lab_1
			add_building = building_capital			# 3 jobs
			add_deposit = d_arcane_generator
			add_building = building_commercial_zone
			add_building = building_dimensional_fabricator
			add_building = building_slave_processing
			clear_blockers = yes
			add_building = building_bureaucratic_1	# 2 jobs
			add_building = building_research_lab_1	# 2 jobs
			add_building = building_foundry_1		# 2 jobs
			add_building = building_factory_1		# 2 jobs
			add_building = building_precinct_house	# 2 jobs
			if = {
				limit = { owner = { is_megacorp = yes } }
				add_building = building_commercial_zone # 5 jobs
			}
			create_pop = { species = event_target:secondary_species ethos = { ethic = ethic_militarist } count = 3 }
			create_pop = { species = event_target:third_species count = 3 }
			create_starbase = {
				size = orbital_ring_tier_1
				owner = root
				# module = <starbase_module>
				# building = <starbase_building>
				effect = { prev = { set_planet_flag = has_megastructure } }
			}
		}
		if = {
			limit = { is_ai = yes }
			# Buff them
			add_resource = { energy = 1000 minerals = 1000 alloys = 1000 }
			if = {
				limit = { is_machine_empire = no }
				add_resource = { food = 1000 }
			}
			if = {
				limit = { is_gestalt = no }
				add_resource = { consumer_goods = 1000 }
			}
			give_technology = { tech = tech_fusion_power message = yes }			# Tier 1
			give_technology = { tech = tech_cold_fusion_power message = yes }		# Tier 2
			# log="Give paindrinkers empire \\[This.GetName] $tech_subdermal_stimulation$"
			give_tech_no_error_effect = { MESSAGE = yes TECH = tech_subdermal_stimulation } # Tier 2
			give_tech_no_error_effect = { MESSAGE = yes TECH = tech_experimental_subspace_navigation } # Tier 2
			give_technology = { tech = tech_antimatter_power message = yes }		# Tier 3
			# give_technology = { message = no tech = tech_sensors_3 }	# Tier 3 later
			add_research_option = tech_zero_point_power		# Tier 4
			add_tech_progress = { tech = tech_zero_point_power progress = 0.1 }
			give_technology = { tech = tech_wormhole_stabilization message = yes } # Tier 3 AI does not trigger research project (v.3.9)
		}
		else = {
			add_research_option = tech_wormhole_stabilization	# Tier 3 later prerequisites = { "tech_hyper_drive_2" "tech_physics_2" }
			add_tech_progress = { tech = tech_wormhole_stabilization progress = 0.80 }
		}

		event_target:secondary_species = {
			random_galaxy_species = {
				limit = {
					is_sapient = yes
					NOR = {
						is_same_species = root.owner_main_species
						is_same_species = prev
						AND = { exists = event_target:third_species is_same_species = event_target:third_species }
						has_trait = trait_necrons
						has_psionic_species_trait = yes
					}
					is_species_class = HUM
					OR = { species_portrait = humanoid_hp_12 is_species = PRESCRIPTED_species_name_mankind }
					num_positive_traits > 1
				}
				# prev = { set_species_identity = prev } do it in aagrimstarts.222
				save_event_target_as = servile_species
			}
		}

		country_event = { id = aagrimstarts.222 days = 1 } # Set Servile Species
		set_country_flag = darkeldar_empire
		set_country_flag = cloaking_tech

		if = {
			limit = { NOT = { exists = event_target:jump_drive_ship } }
			create_fleet = {
				name = "NAME_From_Beyond"
				effect = {
					set_owner = root
					create_ship = {
						name = "NAME_Dagger"
						random_existing_design = science
						prefix = no
						effect = { save_event_target_as = jump_drive_ship }
					}
					set_location = event_target:psi_nav_system
				}
			}
		}
		event_target:jump_drive_ship = {
			if = {
				limit = { is_ship_size = science }
				if = {
					limit = { owner = { is_ai = yes } }
					set_ship_design = { design = "NAME_From_Beyond_Ship_Cloak" }
				}
				else = {
					set_ship_design = { design = "NAME_From_Beyond_Ship" }
				}
				fleet = {
					set_fleet_settings = { can_upgrade = no spawn_debris = no }
				}
			}
		}
		if = {
			limit = {
				any_owned_fleet = { is_ship_size = constructor }
				count_owned_fleet = {
					limit = {
						is_ship_class = shipclass_constructor
						any_owned_ship = { has_component = PSI_JUMP_DRIVE_1 }
					}
					count = 0
				}
			}
			random_owned_fleet = {
				limit = { is_ship_size = constructor }
				set_ship_design = { design = "NAME_Penitent" }
				set_fleet_settings = { can_upgrade = no spawn_debris = no }
			}
		}
	}
}

# Setup origin_greatergood: (on_game_start)
country_event = {
	id = aagrimstarts.9
	is_triggered_only = yes
	hide_window = yes
	# trigger = { has_origin = origin_greatergood }
	immediate = {
		set_country_flag = tau_empire
		set_country_flag = laser_tech
		if = {
			limit = { is_xenophobe = yes }
			country_remove_ethic = ethic_xenophobe
			country_remove_ethic = ethic_fanatic_xenophobe
			shift_ethic = ethic_fanatic_xenophile
		}
		else_if = {
			limit = { NOT = { has_ethic = ethic_fanatic_xenophile } }
			shift_ethic = ethic_fanatic_xenophile
		}
		if = {
			limit = { NOT = { has_civic = civic_aristocratic_elite } }
			force_add_civic = civic_aristocratic_elite
		}
		if = {
			limit = { NOT = { has_civic = civic_inwards_perfection } }
			force_add_civic = civic_inwards_perfection
		}
		if = {
			limit = { NOT = { has_civic = civic_efficient_bureaucracy } }
			force_add_civic = civic_efficient_bureaucracy # Reflecting their organized society
		}
		if = {
			limit = { NOT = { has_civic = civic_meritocracy } }
			force_add_civic = civic_meritocracy # Reflecting their organized society
		}
		give_technology = { message = no tech = tech_robotic_workers }
		give_technology = { message = no tech = tech_droid_workers }
		give_technology = { message = no tech = tech_space_trading }

		owner_main_species = {
			if = {
				limit = { NOT = { has_trait = trait_tau } }
				change_species_characteristics = { add_trait = trait_tau add_traits_at_start_of_list = yes can_change_leader = yes }
			}
			if = {
				limit = { is_species_class = HUM }
				mirror_species = { CLASS = MAM }
				change_species_portrait = rep2
				root = { change_dominant_species = { species = event_target:mirror_species change_all = yes } }
			}
			else_if = {
				limit = { is_species_class = REP }
				mirror_species = { CLASS = MAM }
				change_species_portrait = rep2
				root = { change_dominant_species = { species = event_target:mirror_species change_all = yes } }
			}
			else_if = {
				limit = { is_species_class = MAM }
				change_species_portrait = rep2
			}
		}
		random_owned_species = {
			limit = {
				is_sapient = yes
				NOT = { is_same_species = root.owner_main_species }
			}
			save_event_target_as = servile_species
			set_species_flag = syncretic_species@root
		}

		# country_event = { id = aagrimstarts.222 days = 1 } # Set Servile Species
		if = {
			limit = { exists = event_target:servile_species }
			modify_species = {
				species = event_target:servile_species
				ideal_planet_class = "pc_tropical" # add_trait = "trait_pc_tropical_preference"
				# add_trait = "trait_syncretic_proles" # 0
				add_trait = "trait_necrophage"		# 0
				add_trait = "trait_adaptive"		# +2
				add_trait = "trait_rapid_breeders"	# +2
				add_trait = "trait_conformists"		# +2
				add_trait = "trait_communal"		# +1
				add_trait = "trait_strong"			# +1
				add_trait = "trait_resilient"		# +1
				add_trait = "trait_fleeting"		# -1
				add_trait = "trait_unruly"			# -2
				effect = {  }
			}
			event_target:servile_species = {
				set_citizenship_type = { country = root type = citizenship_full }
			}
		}

		get_capital_planet = yes
		event_target:capital_planet = {
			add_deposit = d_ore_rich_caverns
			add_deposit = d_ore_rich_caverns
			add_deposit = d_lichen_fields
			add_deposit = d_fungal_caves
			add_deposit = d_fungal_caves
			add_deposit = d_searing_desert
			add_deposit = d_searing_desert
			add_building = building_noble_estates
			# Make starting colonisables be primitives
			solar_system = {
				# Kroot
				closest_system = {
					limit = { has_star_flag = neighbor_t1_first_colony }
					max_steps = 3
					random_system_planet = {
						limit = { is_colonizable = yes is_colony = no has_planet_flag = prescripted_ideal }
						set_name = "Pech"
						# generate_late_pre_ftls_on_planet = yes
						change_pc = "pc_tropical"
						set_planet_flag = Pechplanet
						save_event_target_as = pech
						select_pre_ftl_origin = yes
						# create_pre_ftl_species = yes
						create_species = {
							sapient = yes
							name = "Kroot"
							class = "AVI"
							portrait = "avi14"
							plural = "Kroot_plural"
							adjective = "Kroot_adj"
							species_bio = "Kroot_desc"
							traits = {
								ideal_planet_class = "pc_tropical" # add_trait = "trait_pc_tropical_preference"
								trait = "trait_necrophage"		# 0
								trait = "trait_adaptive"		# +2
								trait = "trait_rapid_breeders"	# +2
								trait = "trait_conformists"		# +2
								trait = "trait_communal"		# +1
								trait = "trait_strong"			# +1 Kroot are known for their physical strength.
								trait = "trait_resilient"		# +1
								trait = "trait_fleeting"		# -1
								trait = "trait_unruly"			# -2
							}
							# can_be_modified = this
							# gender = this
							homeworld = event_target:pech # Jungle-covered Death World Pech
							name_list = "AVI2"
							extra_trait_points = 4
							effect = {
								save_event_target_as = servile_species
								set_citizenship_type = { country = root type = citizenship_full }
								change_species_characteristics = {
									# add_trait = "trait_limited_regeneration"
									# add_trait = "trait_hunters" # Reflecting their skills as hunters and trackers.
									add_trait = "trait_nomadic" # They are known to be a nomadic species.
									add_trait = "trait_deviants" # Reflecting their diverse and adaptable nature
								}
							}
						}
						create_late_pre_ftl_empire = yes
						setup_pre_ftl_planet = yes
						pre_ftl_clean_up_effect = yes
						change_colony_foundation_date = -461
						while = { count = 4
							create_army = { owner = last_created_country type = primitive_additional_army species = event_target:servile_species }
						}
						# Somehow vanilla bug
						last_created_country = {
							if = {
								limit = { is_homicidal = yes }
								force_remove_civic = civic_fanatic_purifiers
								force_remove_civic = civic_machine_terminator
								force_remove_civic = civic_hive_devouring_swarm
							}
						}
					}
				}
				reroll_random = yes
				# Vespid
				closest_system = {
					limit = { has_star_flag = neighbor_t2_second_colony }
					max_steps = 6
					random_system_planet = {
						limit = { is_colonizable = yes is_colony = no has_planet_flag = prescripted_ideal }
						# generate_late_pre_ftls_on_planet = yes
						set_name = "Vespid Prime"
						change_pc = "pc_desert"
						set_planet_flag = Vespidplanet
						save_event_target_as = vespid
						select_pre_ftl_origin = yes
						# create_pre_ftl_species = yes
						create_species = {
							sapient = yes
							# is_mod = yes
							name = "Vespid"
							plural = "Vespids"
							class = "ART"
							portrait = "art1" # You may need to create a custom portrait if one doesn't already exist.
							species_bio = "The Vespid are an insectoid species from the arid world of Vespid Prime. With their tough exoskeletons and advanced crystal-based weaponry, they are formidable warriors. Vespid society is structured around a hive system led by a queen, and they communicate through pheromones and ultrasonic vibrations. Their strength, agility, and unique culture make them a notable presence in the galaxy."
							name_list = "ART2"
							traits = {
								ideal_planet_class = event_target:vespid
								trait = "trait_strong"			# Vespids are known for their physical strength.
								trait = "trait_intelligent"		# They have a unique form of communication and intelligence.
								trait = "trait_slow_breeders"	# Reflecting their low reproduction rate.
								trait = "trait_conformists"		# They are loyal to their leaders.
								trait = "trait_enduring"		# Resilience and ability to withstand damage
								trait = "trait_adaptive"		# Ability to survive in harsh environments
								trait = random_traits
								trait = random_traits
							}
							# can_be_modified = this
							# gender = this
							homeworld = event_target:vespid
							extra_trait_points = 4
							effect = {
								save_event_target_as = servile_species
								set_citizenship_type = { country = root type = citizenship_full }
							}
						}
						create_late_pre_ftl_empire = yes
						setup_pre_ftl_planet = yes
						pre_ftl_clean_up_effect = yes
						change_colony_foundation_date = -1275
						while = { count = 4
							create_army = { owner = last_created_country type = primitive_additional_army species = event_target:servile_species }
						}
					}
					# Somehow vanilla bug
					last_created_country = {
						if = {
							limit = { is_homicidal = yes }
							force_remove_civic = civic_fanatic_purifiers
							force_remove_civic = civic_machine_terminator
							force_remove_civic = civic_hive_devouring_swarm
						}
					}
				}
			}
		}
	}
}

# origin_bioreformers (on_game_start)
country_event = {
	id = aagrimstarts.10
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		owner_main_species = {
			if = {
				limit = { NOT = { has_trait = trait_tyranid } }
				change_species_characteristics = { add_trait = trait_tyranid add_traits_at_start_of_list = yes can_change_leader = yes }
			}
			if = {
				limit = {
					OR = { prev = { is_ai = yes } has_necroids = yes }
					NOT = { has_trait = trait_necrophage }
					prev = {
						NOR = {
							is_xenophile = yes
							has_ethic = ethic_fanatic_egalitarian
							is_death_cult_empire = yes
							has_civic = civic_hive_empath
							has_civic = civic_permanent_employment
						}
					}
				}
				change_species_characteristics = { add_trait = trait_necrophage add_traits_at_start_of_list = yes can_change_leader = yes }
			}
		}
		give_technology = { message = no tech = tech_space_exploration }
		give_technology = { message = no tech = tech_colonization_1 }
		give_technology = { message = no tech = tech_terrestrial_sculpting }
		give_technology = { tech = tech_genome_mapping message = yes }	# Tier 1
		give_technology = { message = no tech = tech_cloning }
		# give_tech_no_error_effect = { TECH = tech_society_1 MESSAGE = yes }		# Tier 2
		# give_tech_no_error_effect = { TECH = tech_society_2 MESSAGE = yes }		# Tier 3
		give_technology = { message = no tech = tech_gene_tailoring }	# Tier 3
		give_technology = { message = no tech = tech_morphogenetic_field_mastery }
		give_technology = { message = no tech = tech_climate_restoration }

		get_capital_planet = yes
		event_target:capital_planet = {
			clear_blockers = yes
			# clear_basic_districts?
			if = {
				limit = { planet_size < 25 }
				set_planet_size = 25
			}
			validate_planet_buildings_and_districts = yes
			## Add the districts and buildings
			remove_building = building_hive_warren
			add_district = district_hive
			add_district = district_hive
			add_district = district_generator_uncapped
			add_district = district_generator_uncapped
			add_district = district_generator_uncapped
			add_district = district_mining_uncapped
			add_district = district_farming_uncapped
			add_district = district_farming_uncapped
		}
		create_fleet = {
			set_take_point = yes
			effect = {
				set_owner = prev
				while = { count = 2
					create_ship = { name = random random_existing_design = corvette }
				}
				set_location = prev.capital_star
			}
		}
		# Buff them
		add_resource = { energy = 1000 minerals = 500 alloys = 500 }
		if = {
			limit = { is_machine_empire = no }
			add_resource = { food = 1000 }
		}
		if = {
			limit = { is_gestalt = no }
			add_resource = { consumer_goods = 1000 }
		}
		set_country_flag = tyranid_empire
		country_event = { id = aagrimstarts.2008 days = 2 } # relations

		if = {
			limit = {
				has_grand_archive_dlc = yes
				NOR = {
					is_gestalt = yes
					has_civic = civic_beastmasters
					has_civic = civic_eager_explorers
					has_civic = civic_corporate_beastmasters
				}
			}
			if = {
				limit = { is_megacorp = no }
				force_add_civic = civic_beastmasters
			}
			else_if = {
				limit = {
					OR = { is_megacorp = yes has_civic = civic_galactic_sovereign_megacorp }
					NOT = { has_civic = civic_privatized_exploration }
				}
				force_add_civic = civic_corporate_beastmasters
			}
		}
		# if = { TODO
		# 	limit = { is_ai = yes }
		# 	set_graphical_culture = tyranid_01
		# 	set_city_graphical_culture = tyranid_01
		# }

		if = { # Compat
			limit = {
				NOR = {
					has_country_flag = humanoid
					owner_main_species = {
						OR = {
							is_species_class = "Genestealer"	# Compat Mod "WH species"
							species_portrait = "Genestealer"	# Compat Mod "WH species"
							is_species = "Genestealer"
						}
					}
				}
			}
			if = {
				limit = { NOT = { has_origin = origin_bioreformers } }
				if = { # Compat Mod "Warhammer 40K - Tyranids"
					limit = {
						has_origin = origin_tyranid_planet
						owner_main_species = { NOT = { is_species_class = "Tyranid" } }
					}
					owner_main_species = {
						mirror_species = { CLASS = "Tyranid" }
					}
				}
				set_origin = origin_bioreformers
			}
			set_policy = { policy = first_contact_protocol option = first_contact_attack_allowed cooldown = yes }
		}
		else_if = { # Compat Genestealer
			limit = { NOT = { has_origin = origin_bioreformers } }
			if = {
				limit = { has_ethic = ethic_authoritarian }
				country_remove_ethic = ethic_authoritarian
			}

			if = {
				limit = { is_pacifist = no }
				shift_ethic = ethic_pacifist
			}
			if = {
				limit = { is_xenophile = no }
				shift_ethic = ethic_xenophile
			}
			set_ai_personality = migrating_flock
			if = {
				limit = { NOT = { has_civic = civic_selective_kinship } }
				force_add_civic = civic_selective_kinship
			}
			if = {
				limit = {
					host_has_dlc = "Apocalypse"
					NOT = { has_civic = civic_barbaric_despoilers }
				}
				# force_add_civic = civic_barbaric_despoilers
				change_government = {
					civics = { civic = civic_barbaric_despoilers }
					remove_invalid_civics = yes
				}
			}
			if = {
				limit = { is_megacorp = no }
				change_government = {
					authority = auth_corporate
					civics = { civic = civic_selective_kinship civic = civic_criminal_heritage }
					remove_invalid_civics = yes
				}
			}

			if = {
				limit = { NAND = { is_megacorp = yes has_civic = civic_galactic_sovereign_megacorp } }
				force_add_civic = civic_galactic_sovereign_megacorp
			}
			if = {
				limit = { NOT = { has_civic = civic_criminal_heritage } }
				force_add_civic = civic_criminal_heritage
			}
			if = {
				limit = { is_ai = yes }
				set_ai_personality = migrating_flock
			}
			set_policy = { policy = first_contact_protocol option = first_contact_proactive cooldown = yes }
			set_country_flag = human_empire
		}
		if = {
			limit = { is_ai = yes has_origin = origin_bioreformers }
			give_technology = { message = no tech = tech_fusion_power }				# tier = 1
			give_technology = { message = no tech = tech_missiles_2 }				# tier = 1
			give_technology = { message = no tech = tech_space_whale_weapon_1 }		# tier = 1
			add_research_option = tech_amoeba_strike_craft_1						# tier = 2
			add_research_option = tech_swarmer_missiles_1							# tier = 2
		}
	}
}

# Necron origin_necron_awakening (on_game_start) (delay)
country_event = {
	id = aagrimstarts.11
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		get_capital_planet = yes
		if = {
			limit = {
				OR = { is_ai = yes has_astral_planes_dlc = yes }
				NOR = { is_gestalt = yes has_civic = civic_dark_consortium }
			}
			change_government = {
				civics = { civic = civic_dark_consortium }
				remove_invalid_civics = yes
			}
		}
		give_technology = { message = no tech = tech_power_hub_1 }
		give_technology = { message = no tech = tech_cryostasis_1 }
		give_technology = { message = no tech = tech_sensors_2 }			# Tier 2
		give_technology = { message = no tech = tech_hyper_drive_2 }		# Tier 2
		give_technology = { message = no tech = tech_experimental_subspace_navigation }	# Tier 2

		# if = {
		# 	limit = {
		# 		NOT = { has_tradition = tr_synthetics_adopt }
		# 		OR = { is_ai = yes has_synthetic_dawn = yes }
		# 	}
		# 	# set_country_flag = synthetic_empire # i.e. Has completed "SYNTHETIC_EVOLUTION_PROJECT"
		# 	add_tradition = tr_synthetics_adopt
		# 	add_tradition = tr_synthetics_maintenance_protocols
		# 	add_tradition = tr_synthetics_optimization_algorithms
		# 	add_tradition = tr_synthetics_transubstatiation_synthesis
		# 	complete_special_project = { type = SYNTHETIC_EVOLUTION_PROJECT }
		# }
		# else = { set_country_flag = synthetic_empire }

		owner_species = {
			if = {
				limit = { NOT = { has_trait = trait_necrons } }
				change_species_characteristics = { add_trait = trait_necrons add_traits_at_start_of_list = yes immortal = yes can_change_leader = yes }
			}
			if = {
				limit = { NOR = { is_species_class = MACHINE has_global_flag = WHspecies_installed } }
				mirror_species = { CLASS = MACHINE }
				root = { change_dominant_species = { species = event_target:mirror_species change_all = yes } }
			}
			else_if = {
				limit = { has_global_flag = WHspecies_installed NOT = { is_species_class = Necrons } }
				mirror_species = { CLASS = Necrons }
				root = { change_dominant_species = { species = event_target:mirror_species change_all = yes } }
			}
			if = {
				limit = { NOT = { has_trait = trait_machine_unit } }
				change_species_characteristics = { add_trait = trait_machine_unit add_traits_at_start_of_list = yes }
			}
		}
		event_target:capital_planet = {
			if = {
				limit = { has_building = building_research_lab_1 }
				remove_building = building_research_lab_1
			}
			add_district = district_nexus
			if = {
				limit = { planet_size < 22 }
				set_planet_size = 22
			}
			add_deposit = d_collapsed_spire
			# remove_building = building_factory_1
			# add_deposit = d_production_datacore
			# add_deposit = d_research_datacore
			add_deposit = d_abandoned_mining_tunnels
			add_deposit = d_immense_solar_array
			add_deposit = d_ancient_reactor_pits
			add_deposit = d_crumbling_mining_tunnels
			add_deposit = d_relic_metal_boneyard
			add_deposit = d_relic_metal_boneyard
			add_district = district_farming
			add_district = district_mining
			add_district = district_generator

			add_building = building_class_4_singularity

			solar_system = {
				random_system_planet = {
					limit = { is_star = no is_colony = no }
					weights = { base = 40
						modifier = { add = -10 OR = { is_moon = yes is_asteroid = yes } }
					}
					if = {
						limit = { planet_size < 14 }
						set_planet_size = 14
					}
					if = {
						limit = { OR = { habitable_planet_not_urban = yes colonizable_planet = no } }
						change_pc = pc_nuked
					}
					set_planet_flag = pf_guarenteed_stasis_tombs
					if = {
						limit = { NOT = { has_modifier = "irradiated_planet" } }
						add_modifier = { modifier = "irradiated_planet" days = -1 }
					}
					add_deposit = d_ancient_battlefield
					add_deposit = d_organic_landfill
					add_deposit = d_former_battlefield
					add_deposit = d_exterminators_ruins
				}
			}

			add_district = { district_type = district_farming ignore_cap = yes }
			add_district = { district_type = district_nexus ignore_cap = yes }
			add_district = { district_type = district_mining ignore_cap = yes }
			add_district = { district_type = district_generator ignore_cap = yes }

			add_deposit = d_abandoned_mining_tunnels
			add_deposit = d_ancient_reactor_pits

			set_planet_flag = pf_generated_stasis_tombs
			set_planet_flag = pf_guarenteed_stasis_tombs

			# Debuff (nerf)
			if = { limit = { is_ai = yes } set_variable = { which = temp_kcounter value = 12 } }
			else = { set_variable = { which = temp_kcounter value = 6 } }
			while = { count = temp_kcounter
				limit = { num_sapient_pops > 22 }
				random_owned_pop = {
					weights = { base = 1
						modifier = { add = 4 is_unemployed = yes }
						modifier = { add = 10 NOT = { is_same_species = root.owner_species } }
					}
					kill_pop = yes
					prev = { add_deposit = d_aa_stasis_chambers }
				}
			}
			remove_deposit = d_ancient_battlefield
			remove_deposit = d_organic_landfill
			remove_deposit = d_former_battlefield
			remove_deposit = d_exterminators_ruins
			clear_variable = temp_kcounter

			if = {
				limit = { NOT = { has_building = building_master_archive } }
				add_building = building_master_archive
			}

			if = {
				limit = { NOT = { has_building = building_master_archive } }
				add_building = building_master_archive
			}

			if = {
				limit = {
					any_galaxy_species = {
						has_trait = trait_machine_unit
						has_trait = trait_necrons
						OR = {
							has_species_flag = machine_god
							any_species_pop = { has_modifier = machine_god }
						}
					}
				}
				## RESTORE NECRON OVERLORD SPECIES
				random_galaxy_species = {
					limit = {
						has_trait = trait_machine_unit
						has_trait = trait_necrons
						OR = {
							has_species_flag = machine_god
							any_species_pop = { has_modifier = machine_god }
						}
					}
					save_event_target_as = azaryn_species
				}
			}
			else = {
				create_species = {
					name = PRESCRIPTED_ruler_name_necron
					species_bio = "§LThis species is so far above others that they're often viewed as deities.§!"
					class = PARAGON # MACHINE
					portrait = par_renown_03
					homeworld = root.owner_species
					# traits = root.owner_species
					traits = {
						trait = "trait_machine_unit"
						trait = "trait_necrons"
						trait = "trait_robot_high_bandwidth"
						trait = random_traits
					}
					# is_mod = yes breaks the game
					namelist = root.owner_species
					immortal = yes
					can_be_modified = no
					gender = indeterminable
					# clear_parent_species_link = yes
					allow_negative_traits = no
					extra_trait_points = 3
					effect = {
						set_species_flag = machine_god
						save_event_target_as = azaryn_species
						# set_species_identity = root.owner_species
						set_citizenship_type = { country = root type = citizenship_full_machine cooldown = yes }
					}
				}
				# modify_species = {
				# 	base = none
				# 	portrait = par_renown_03
				# 	change_scoped_species = no
				# 	effect = {
				# 		set_species_flag = machine_god
				# 		rename_species = { name = random }
				# 		save_event_target_as = azaryn_species
				# 		set_citizenship_type = { country = root type = citizenship_full_machine cooldown = no }
				# 		change_species_characteristics = {
				# 			immortal = yes
				# 			can_be_modified = no
				# 			portrait = par_renown_03
				# 			gender = any
				# 		}
				# 	}
				# }
			}
			closest_system = {
				limit = {
					any_system_planet = {
						is_colonizable = yes
						NOR = { is_colony = yes has_deposit = d_aa_stasis_chambers }
					}
				}
				max_steps = 6
				create_nearby_tomb_planet = yes
				closest_system = {
					limit = {
						any_system_planet = {
							is_colonizable = yes
							NOR = { is_colony = yes has_deposit = d_aa_stasis_chambers }
						}
					}
					max_steps = 10
					create_nearby_tomb_planet = yes
					closest_system = {
						limit = {
							any_system_planet = {
								is_colonizable = yes
								NOR = { is_colony = yes has_deposit = d_aa_stasis_chambers }
							}
						}
						max_steps = 15
						create_nearby_tomb_planet = yes
					}
					closest_system = {
						limit = {
							any_system_planet = {
								is_colonizable = yes
								NOR = { is_colony = yes has_deposit = d_aa_stasis_chambers }
							}
						}
						max_steps = 25
						create_nearby_tomb_planet = yes
					}
					closest_system = {
						limit = {
							any_system_planet = {
								is_colonizable = yes
								NOR = { is_colony = yes has_deposit = d_aa_stasis_chambers }
							}
						}
						max_steps = 50
						create_nearby_tomb_planet = yes
						closest_system = {
							limit = {
								any_system_planet = {
									is_colonizable = yes
									NOR = { is_colony = yes has_deposit = d_aa_stasis_chambers }
								}
							}
							max_steps = 50
							create_nearby_tomb_planet = yes
						}
					}
				}
			}
		}
		create_fleet = {
			set_take_point = yes
			effect = {
				set_owner = prev
				while = { count = 3
					create_ship = { name = random random_existing_design = corvette }
				}
				set_location = prev.capital_star
			}
		}
		create_leader = {
			name = PRESCRIPTED_ruler_name_necron
			species = event_target:azaryn_species
			class = random_ruler
			skill = 3
			set_age = 99
			randomize_traits = no
			traits = {
				# 3 = leader_trait_reformer
				# 3 = leader_trait_legendary_military_knowledge
				3 = leader_trait_legendary_high_king
				trait = leader_trait_legendary_ancestors_knowledge
				trait = leader_trait_legendary_unfriendly
				# trait = leader_trait_zealot
				trait = leader_trait_chosen # leader_trait_composer_chosen
				# trait = leader_trait_expert_survivalist
				trait = trait_ruler_logistic_understanding_2
			}
			gender = female
			event_leader = yes
			immortal = yes
			hide_age = yes
			can_manually_change_location = no
			can_assign_to_council = yes
			hide_leader = yes
			background_planet = event_target:capital_planet
			skip_background_generation = yes
			background_ethic = ethic_fanatic_xenophobe # ethic_gestalt_consciousness
			# custom_description = root.ruler
			# custom_catch_phrase = root.ruler
			# background_job = root.ruler
		}
		if = {
			limit = { is_gestalt = no }
			if = {
				limit = { NOT = { has_global_flag = ethic_civic_classic_active } }
				if = {
					limit = { is_authoritarian = no }
					shift_ethic = ethic_authoritarian
				}
				else_if = {
					limit = { is_materialist = no is_militarist = no }
					shift_ethic = ethic_materialist
				}
				else_if = {
					limit = { is_militarist = no }
					shift_ethic = ethic_militarist
				}
				else_if = {
					limit = { NOT = { has_ethic = ethic_fanatic_authoritarian } }
					shift_ethic = ethic_fanatic_authoritarian
				}
				else_if = {
					limit = { is_xenophobe = no }
					shift_ethic = ethic_xenophobe
				}
			}
			if = {
				limit = { is_spiritualist = yes is_authoritarian = yes NOT = { has_civic = civic_imperial_cult } }
				force_add_civic = "civic_imperial_cult"
			}
			if = {
				limit = { NOR = { is_egalitarian = yes has_civic = civic_technocracy has_civic = civic_aristocratic_elite has_civic = civic_exalted_priesthood } }
				force_add_civic = "civic_aristocratic_elite"
			}
			else_if = {
				limit = { is_materialist = yes NOR = { has_civic = civic_technocracy has_civic = civic_aristocratic_elite } }
				force_add_civic = "civic_technocracy"
			}
			if = {
				limit = { is_militarist = yes }
				if = {
					limit = { NOT = { has_civic = civic_warrior_culture } }
					force_add_civic = "civic_warrior_culture"
				}
				else_if = {
					limit = { NOT = { has_civic = civic_distinguished_admiralty } }
					force_add_civic = "civic_distinguished_admiralty"
				}
				else_if = {
					limit = { NOT = { has_civic = civic_nationalistic_zeal } }
					force_add_civic = "civic_nationalistic_zeal"
				}
			}
		}

		last_created_leader = {
			species = {
				set_species_flag = machine_god
				# rename_species = { name = "Necron" } # TODO
				# save_event_target_as = azaryn_species
				# set_species_identity = root.owner_species
				if = {
					limit = { count_species_pop = { limit = { } count = 0 } }
					event_target:capital_planet = {
						create_pop = { species = prev ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } }
					}
				}
				random_species_pop = {
					log="Init Machine God"
					add_modifier = { modifier = machine_god }
					add_modifier = { modifier = army_rank_elite }
					add_modifier = { modifier = agenda_conquer_nature_finish }
					add_modifier = { modifier = pop_happiness_positive }
				}
			}
			root = {
				if = {
					limit = { is_ai = yes }
					# ruler = { kill_leader = { show_notification = no } }
					# country_event = { id = paragon_2.2095 scopes = { from = prev } days = 1 }
					event_target:capital_planet = {
						assign_leader = prevprev
						if = {
							limit = { exists = sector exists = sector.sector_capital.leader }
							sector.sector_capital = { assign_leader = prevprevprev }
						}
					}
					assign_leader = prev
					if = {
						limit = { count_country = { limit = { has_relic = r_time_crystal } count = 0 } }
						add_relic = r_time_crystal
					}
				}
			}
			set_owner = root
			set_immortal = yes
			freeze_leader_age = yes
			add_skill_without_trait_selection = 5
			set_leader_flag = leader_death_events_blocked
			set_leader_flag = immune_to_negative_traits
			set_leader_flag = machine_god
			if = {
				limit = { root = { OR = { is_ai = yes has_paragon_dlc = yes } } }
				add_trait_no_notify = leader_trait_legendary_leader
				add_trait_no_notify = leader_trait_the_apparatus_luminary # 50 energy
				add_trait_no_notify = leader_trait_the_synth_luminary # 25 alloys
				add_trait_no_notify = leader_trait_zealot
				# add_trait_no_notify = leader_trait_expert_survivalist
				# add_trait_no_notify = subclass_official_visionary
				set_leader_flag = paragon_origin_legendary_leader
				paragon_origin_legendary_leader_trait_giver = yes
			}
		}
		# Too much costs for start
		if = {
			limit = { ruler = { has_trait = leader_trait_the_synth_luminary } }
			add_modifier = { modifier = copy_alloys_income_modifier mult = 25 } # Compensate alloys costs
			# add_monthly_resource_mult = { resource = alloys value = 2 }
		}
		if = {
			limit = { ruler = { has_trait = leader_trait_the_apparatus_luminary } }
			add_modifier = { modifier = copy_energy_income_modifier mult = 50 } # Compensate energy costs
			# add_monthly_resource_mult = { resource = energy value = 2 }
		}
		give_tech_no_error_effect = { TECH = tech_lasers_2 MESSAGE = no }	# Tier 1
		give_tech_no_error_effect = { TECH = tech_plasma_1 MESSAGE = no }	# Tier 2
		give_tech_no_error_effect = { TECH = tech_lasers_3 MESSAGE = no }	# Tier 2
		give_tech_no_error_effect = { TECH = tech_mine_dark_matter MESSAGE = yes }
		give_tech_no_error_effect = { TECH = tech_mine_living_metal MESSAGE = yes }

		set_country_flag = necron_empire
		set_country_flag = laser_tech
		set_ai_personality = necron
		set_global_flag = necron_empire_created
		if = {
			limit = { is_ai = yes }
			give_tech_no_error_effect = { TECH = tech_plasma_2 MESSAGE = yes }	# Tier 3
			give_tech_no_error_effect = { TECH = tech_lasers_4 MESSAGE = yes }	# Tier 3
			give_tech_no_error_effect = { TECH = tech_plasma_3 MESSAGE = yes }	# Tier 4
			give_tech_no_error_effect = { TECH = tech_hyper_drive_3 MESSAGE = yes }	# Tier 3
			give_tech_no_error_effect = { TECH = tech_basic_science_lab_1 MESSAGE = yes }
			give_tech_no_error_effect = { TECH = tech_administrative_ai MESSAGE = yes }
			give_tech_no_error_effect = { TECH = tech_self_aware_logic MESSAGE = yes }
		}
		give_tech_no_error_effect = { TECH = tech_adaptive_combat_algorithms MESSAGE = no }
		give_tech_no_error_effect = { TECH = tech_powered_exoskeletons MESSAGE = no }

		random_owned_species = {
			limit = {
				is_same_species = root.owner_main_species
				NOT = { is_exact_same_species = event_target:azaryn_species }
			}
			root = { set_built_species = prev }
		}

		country_event = { id = aagrimstarts.2011 } # relations
	}
}

# origin_iforge "Adeptus Mechanicus" (on_game_start)
country_event = {
	id = aagrimstarts.12
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		give_tech_no_error_effect = { TECH = tech_thrusters_1 MESSAGE = no }
		give_tech_no_error_effect = { TECH = tech_automated_exploration MESSAGE = no }
		give_tech_no_error_effect = { TECH = tech_sensors_2 MESSAGE = no }
		give_tech_no_error_effect = { TECH = tech_starbase_1 MESSAGE = no }
		give_tech_no_error_effect = { TECH = tech_mining_1 MESSAGE = no }
		give_technology = { message = no tech = tech_thrusters_2 }
		give_technology = { message = no tech = tech_powered_exoskeletons }
		give_technology = { message = no tech = tech_disruptors_1 }
		give_technology = { message = no tech = tech_robotic_workers } # tier1weight3
		give_technology = { message = no tech = tech_colonial_centralization } # tier2weight2
		give_technology = { message = no tech = tech_droid_workers } # tier2weight3
		give_technology = { message = yes tech = tech_integrated_cybernetics } # tier2weight3
		# add_research_option = tech_planetary_shield_generator
		# add_research_option = tech_robomodding

		get_capital_planet = yes
		event_target:capital_planet = {
			if = {
				limit = { NOR = { is_imperium_hive_planet = yes is_wh_planet_industrial = yes } }
				change_pc = pc_hive_tundra # pc_imperiumhive
			}
			if = {
				limit = { has_planet_flag = planet_mars }
				set_name = "Sol Mars"
			}
			else_if = {
				limit = { solar_system = { any_system_planet = { has_planet_flag = planet_mars } } }
				solar_system = {
					random_system_planet = {
						limit = { has_planet_flag = planet_mars }
						if = {
							limit = { is_colony = no }
							create_colony = { owner = root species = root.owner_species }
						}
						set_name = "Sol Mars"
						set_capital = yes
						root = { set_custom_capital_location = prev }
					}
				}
			}
			else = {
				random_list = {
					19 = { set_name = "Mechanar Prime" }
					18 = { set_name = "Cognitron Prime" }
					17 = { set_name = "Technopolis Secundus" }
					16 = { set_name = "Omnisar Forge World" }
					15 = { set_name = "Machinaria Prime" }
					14 = { set_name = "Circuitron Prime" }
					13 = { set_name = "Cogitara Prime" }
					12 = { set_name = "Technotropolis" }
					11 = { set_name = "Synthetar Alpha" }
					10 = { set_name = "Automata Primus" }
					8 = { }
				}
			}

			while = {
				limit = { has_district = district_generator }
				remove_district = district_generator
			}
			while = {
				limit = { has_district = district_mining }
				remove_district = district_mining
			}
			while = {
				limit = { has_district = district_farming }
				remove_district = district_farming
			}
			while = {
				limit = { has_district = district_city }
				remove_district = district_city
			}
			set_planet_flag = legionhomeworld
			if = {
				limit = { NOT = { has_planet_flag = has_megastructure } }
				create_starbase = {
					size = orbital_ring_tier_1
					# owner = root someone other?
					# module = <starbase_module>
					# building = <starbase_building>
					effect = {
						# prev = { set_planet_flag = has_megastructure }
						starbase_event = { id = action.225 scopes = { from = root } } # Starbase being destroyed
						delete_fleet = fleet
					}
				}
			}

			remove_building = building_factory_1
			remove_building = building_foundry_1
			remove_building = building_temple
			remove_building = building_research_lab_1
			remove_building = building_bureaucratic_1
			# remove_building = building_capital
			# add_building = building_system_capital_gr
			add_district = district_arcology_housing
			add_district = district_arcology_manufactorum
			add_district = district_arcology_corpsestarch
			add_district = district_arcology_corpsestarch
			add_building = building_bureaucratic_1_gr
			add_building = building_precinct_house_gr
			add_building = building_research_lab_1_gr
			add_building = building_foundry_1_gr
			add_building = building_temple_gr
			add_building = building_fortress_gr
			clear_deposits = yes
			add_deposit = d_holyterra_sprawl
			add_deposit = d_holyterra_sprawl
			add_deposit = d_holyterra_defences
			validate_planet_buildings_and_districts = yes
			add_building = building_robot_assembly_plant

			## Look for an established system colony
			if = {
				limit = { root = { num_owned_planets < 2 } }
				solar_system = {
					random_system_planet = {
						limit = { is_colony = no is_colonizable = yes }
						weights = { base = 1
							modifier = { add = 50
								OR = {
									merg_is_relic_world = yes
									is_planet_class = pc_continental
									merg_is_gaia_basic = yes
									is_ideal_planet_class = { who = root status = yes }
									has_planet_flag = planet_earth
								}
							}
						}
						add_planet_devastation = 35
						if = {
							limit = { root = { is_ai = yes } }
							clear_blockers = yes
							# create_colony = { owner = root species = root.owner_species }
							start_colony = { owner = root species = root.owner_species }
							generate_start_deposits_and_blockers = yes
							generate_start_buildings_and_districts = yes
							# generate_start_pops = yes
							create_pop = { species = root.owner_species ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } }
						}
					}
				}
			}
		}

		# create_fleet = {
		# 	set_take_point = yes
		# 	effect = {
		# 		set_owner = prev
		# 		while = { count = 3
		# 			create_ship = { name = random random_existing_design = corvette }
		# 		}
		# 		set_location = prev.capital_star
		# 	}
		# }

		if = {
			limit = {
				NOT = { has_tradition = tr_cybernetics_adopt }
				OR = { is_ai = yes has_utopia = yes }
			}
			# TODO SOLVE FAKE has_ascension_perk = ap_the_flesh_is_weak
			add_tradition = "tr_cybernetics_adopt"
			complete_special_project = { type = "FLESH_IS_WEAK_PROJECT" }
			set_country_flag = cyborg_empire # i.e. Has completed "FLESH_IS_WEAK_PROJECT"
			add_tradition = "tr_cybernetics_transubstantiation_synthesis"
			add_tradition = "tr_cybernetics_metabolic_reprocessing"
			add_tradition = "tr_cybernetics_integrated_anatomy"
			add_tradition = "tr_cybernetics_augmentation_overload"
			# add_tradition = "tr_cybernetics_modular_cybernetics"
			# add_tradition = "tr_cybernetics_finish"
		}
		else_if = { # NOT compatible - needs AA's Cyborg Ascendance (3.4)
			limit = {
				NOT = { has_tradition = tr_synthetics_adopt }
				OR = { is_ai = yes has_synthetic_dawn = yes }
			}
			give_technology = { message = yes tech = tech_synthetic_workers }
			give_technology = { message = no tech = tech_synthetic_leaders }
			add_tradition = "tr_synthetics_adopt"
			add_tradition = "tr_synthetics_maintenance_protocols"
			add_tradition = "tr_synthetics_optimization_algorithms"
			add_tradition = "tr_synthetics_transubstatiation_synthesis"
			# add_tradition = "tr_synthetics_prefabricated_components"
			# add_tradition = "tr_synthetics_solid_state_actuators"
			# add_tradition = "tr_synthetics_finish"
			complete_special_project = { type = "SYNTHETIC_EVOLUTION_PROJECT" } # set_country_flag = synthetic_empire # i.e. Has completed "SYNTHETIC_EVOLUTION_PROJECT"
		}
		## Species
		owner_main_species = {  # Debuff
			while = { count = 20
				limit = { count_species_pop = { count > 2 } }
				random_species_pop = { kill_pop = yes }
			}
			if = {
				limit = { NOT = { has_trait = trait_adeptus_mechanicus } }
				change_species_characteristics = { add_trait = trait_adeptus_mechanicus add_traits_at_start_of_list = yes can_change_leader = yes }
			}
		}
		every_owned_species = {
			limit = { NOT = { has_trait = trait_functional } }  # Debuff
			while = { count = 1 random_species_pop = { kill_pop = yes } }
			change_species_characteristics = { add_trait = trait_functional add_traits_at_start_of_list = yes }
			if = {
				limit = { NOT = { has_trait = trait_cyborg } }
				change_species_characteristics = { add_trait = trait_cyborg can_change_leader = yes }
			}
		}
		every_owned_species = {
			limit = { NOT = { has_trait = trait_cybernetic } } # Debuff
			while = { count = 1 random_species_pop = { kill_pop = yes } }
			change_species_characteristics = { add_trait = trait_cybernetic add_traits_at_start_of_list = yes }
			if = {
				limit = { NOT = { has_trait = trait_cyborg } }
				change_species_characteristics = { add_trait = trait_cyborg can_change_leader = yes }
			}
		}

		random_owned_species = {
			limit = {
				is_sapient = yes
				NOR = { is_same_species = root.owner_main_species has_trait = trait_syncretic_proles has_trait = trait_cyborg_double_jointed }
			}
			log="Found servile species for [Root.GetName]"
			if = {
				limit = { NOT = { has_trait = trait_lobotomised_servitors } }
				change_species_characteristics = { add_trait = trait_lobotomised_servitors }
			}
			prev = {
				modify_species = {
					base = prev
					add_trait = trait_syncretic_proles
					add_trait = trait_cyborg_double_jointed
					add_traits_at_start_of_list = yes
					effect = { save_event_target_as = servile_species set_species_flag = syncretic_species@root }
				}
			}
		}
		# Given a species, create a mod with trait_cybernetic and apply to all pops, leaders
		# And armies that have the original species and the same owner as the scope object.
		create_cybernetic_species_mod = yes
		every_owned_leader = {
			limit = { NOR = { has_trait = leader_trait_cyborg has_leader_flag = renowned_leader has_leader_flag = legendary_leader } }
			add_trait_no_notify = leader_trait_cyborg
		}
		every_pool_leader = {
			limit = { NOT = { has_trait = leader_trait_cyborg } }
			add_trait_no_notify = leader_trait_cyborg
		}
		ruler = {
			add_skill_without_trait_selection = 1
			set_immortal = yes
			add_trait_no_notify = leader_trait_cyborg
			add_trait_no_notify = leader_trait_the_cybernetic_luminary
		}
		if = {
			limit = { is_spiritualist = yes is_authoritarian = yes NOR = { is_gestalt = yes has_civic = civic_imperial_cult } }
			force_add_civic = "civic_imperial_cult"
		}
		country_event = { id = aagrimstarts.222 days = 1 } # Set Servile Species
		country_event = { id = aagrimstarts.2001 days = 2 } # relations
	}
	after = {
		# TODO Missing compatibility mod check: WH40k Planets Renewed
		event_target:capital_planet = {
			if = {
				limit = { is_wh_planet_industrial = no }
				change_pc = pc_forge_ring
			}
			if = {
				limit = { is_wh_planet_industrial = yes }
				add_district = district_forge_housing
				add_district = district_forge_geothermal
				add_district = district_forge_archeotech_admin
				add_district = district_forge_refinery
			}
		}
	}
}

# Setup delay for AI (10 years)
system_event = {
	id = aagrimstarts.80
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	trigger = {
		has_natural_wormhole = yes
		OR = {
			AND = {
				exists = space_owner
				space_owner = { has_origin = origin_paindrinkers is_ai = yes }
			}
			any_system_colony = {
				owner = { has_origin = origin_paindrinkers is_ai = yes }
			}
		}
	}
	immediate = {
		every_neighbor_system = {
			limit = {
				any_neighbor_system = { NOT = { is_same_value = prevprev } }
				count_neighbor_system = { count > 1 }
			}
			remove_hyperlane = { from = this to = prev }
			# if = { limit = { is_system_connected_to_relay_network = no }
		}
		if = {
			limit = {
				exists = space_owner
				space_owner = { has_origin = origin_paindrinkers }
			}
			space_owner = { save_event_target_as = paindrinkers }
		}
		else = {
			random_system_colony = {
				limit = { owner = { has_origin = origin_paindrinkers } }
				owner = { save_event_target_as = paindrinkers }
			}
		}
		event_target:paindrinkers = {
			if = {
				limit = { NOT = { has_country_flag = encountered_first_wormhole } }
				set_country_flag = encountered_first_wormhole
				add_seen_bypass_type = wormhole
				add_tech_option_or_research_effect = { TECH = tech_wormhole_stabilization PROGRESS = 0.02 CATEGORY = physics_research }
			}

			give_tech_no_error_effect = { MESSAGE = yes TECH = tech_experimental_subspace_navigation } # Tier 2
			give_tech_no_error_effect = { MESSAGE = yes TECH = tech_sensors_3 } # Tier 3
			# give_tech_no_error_effect = { MESSAGE = yes TECH = tech_zero_point_power }	# Tier 4
			# give_tech_no_error_effect = { MESSAGE = yes TECH = tech_jump_drive_1 }	# Tier 5
			add_research_option = tech_jump_drive_1		# Tier 5
			add_tech_progress = { tech = tech_jump_drive_1 progress = 0.5 }
			if = {	# Tier 3 prerequisites = { "tech_hyper_drive_2" "tech_physics_2" }
				limit = { NOT = { has_technology = tech_wormhole_stabilization } }
				# give_tech_no_error_effect = { MESSAGE = no TECH = tech_physics_2 }
				give_tech_no_error_effect = { MESSAGE = no TECH = tech_hyper_drive_2 }
				# add_tech_progress = { tech = tech_wormhole_stabilization progress = 0.02 }
				add_resource = { physics_research = 3000 }
				give_technology = { tech = tech_wormhole_stabilization message = yes }	# Tier 3
			}
			if = {
				limit = { OR = { is_ai = yes has_overlord_dlc = yes } }
				add_research_option = tech_hyper_relays	# Tier 2
				# give_tech_no_error_effect = { MESSAGE = no TECH = tech_hyper_relays }	# Tier 2
			}
			give_technology = { tech = "tech_rare_crystals" message = no }
			give_technology = { tech = "tech_mine_zro" message = yes }
			give_technology = { tech = "tech_mine_rare_crystals" message = yes }
			give_technology = { tech = "tech_mine_volatile_motes" message = yes }
			give_technology = { tech = "tech_mine_exotic_gases" message = yes }
			if = {
				limit = { NOT = { has_country_flag = encountered_first_gateway } }
				set_country_flag = encountered_first_gateway
				add_seen_bypass_type = gateway
				if = {
					limit = { is_ai = yes }
					give_tech_no_error_effect = { MESSAGE = yes TECH = tech_hyper_drive_3 } # Tier 3
					# give_tech_no_error_effect = { MESSAGE = yes TECH = tech_physics_3 } # Tier 4
					add_tech_option_or_research_effect = {
						TECH = tech_gateway_activation # Tier 4 prerequisites = { "tech_hyper_drive_3" "tech_physics_3" }
						PROGRESS = 0.02
						CATEGORY = physics_research
					}
				}
			}
			add_cloaking_tech = yes
		}
		random_system_planet = {
			limit = { is_planet_class = pc_shattered_ring_habitable }
			# Repair Shattered Ring: from decision_shattered_ring_project
			clear_blockers = yes # clear_deposits = yes
			change_pc = pc_ringworld_habitable
			set_planet_entity = { entity = ringworld_habitable_entity graphical_culture = owner }
			start_colony = { owner = event_target:paindrinkers }
			if = {
				limit = { planet_size < 12 }
				set_planet_size = 12
			}
		}
	}
}

# Temp Save Setup origin_soulkeepers "Eldar" void_dweller_system (on_save_game_load)
event = {
	id = aagrimstarts.99
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		years_passed > 0
		# any_playable_country = {
		# 	OR = {
		# 		# has_origin = origin_soulkeepers
		# 		has_soulkeepers_origin = yes
		# 		has_origin = origin_necron_awakening
		# 	}
		# }
	}
	immediate = {
		event_target:global_event_country = {
			# Shroud Rising
			inline_script = { # has_global_flag = shroud_rising_active
				script = merger_of_rules/toggled_code
				code = "
			if = {
				limit = { NOT = { has_country_flag = eot_100 } }
				remove_country_flag = eot_75
				remove_country_flag = eot_50
				remove_country_flag = eot_25
				remove_country_flag = eot_5
				set_country_flag = eot_100
			}
				"
				toggle = @has_shroud_rising_mod
			}
		}
		every_playable_country = {
			country_event = { id = aagrimstarts.2003 }	# Upd Relations
		}

		# if = { # Remove me on > v.3.12
		# 	limit = { NOT = { has_global_flag = grim_checked_imperiumhive } }
		# 	every_galaxy_planet = {
		# 		limit = { is_planet_class = pc_imperiumhive }
		# 		change_pc = pc_hive_tundra
		# 	}
		# 	every_galaxy_species = {
		# 		limit = { has_trait = trait_pc_imperiumhive_preference }
		# 		change_species_characteristics = { add_trait = trait_pc_hive_tundra_preference add_traits_at_start_of_list = yes can_change_leader = yes }
		# 	}
		# 	set_global_flag = grim_checked_imperiumhive
		# }

		random_playable_country = {
			limit = {
				has_origin = origin_paindrinkers
				NAND = { has_country_flag = encountered_first_wormhole has_seen_any_bypass = wormhole }
				any_system_within_border = { has_natural_wormhole = yes }
			}
			random_system_within_border = {
				limit = { has_natural_wormhole = yes }
				random_fleet_in_system = {
					limit = { is_owned_by = prevprev }
					weights = { base = 1
						modifier = { add = 50 is_ship_class = shipclass_science_ship }
					}
					random_owned_ship = {
						fire_on_action = { on_action = on_entering_system_first_time scopes = { from = prevprev fromfrom = prevprevprev } }
						if = {
							limit = {
								is_ship_size = science
								owner = {
									count_owned_fleet = {
										limit = {
											is_ship_class = shipclass_science_ship
											any_owned_ship = { has_component = PSI_JUMP_DRIVE_1 }
										}
										count = 0
									}
								}
							}
							if = {
								limit = { owner = { is_ai = yes } }
								set_ship_design = { design = "NAME_From_Beyond_Ship_Cloak" }
							}
							else = {
								set_ship_design = { design = "NAME_From_Beyond_Ship" }
							}
							fleet = {
								set_fleet_settings = { can_upgrade = no spawn_debris = no }
							}
						}
					}
					prevprev = {
						fire_on_action = { on_action = on_system_survey scopes = { from = prevprev fromfrom = prev.fleet } }
						set_country_flag = encountered_first_wormhole
						add_seen_bypass_type = wormhole
						give_tech_no_error_effect = { MESSAGE = yes TECH = tech_wormhole_stabilization }
					}
				}
			}
			if = {
				limit = {
					count_owned_fleet = {
						limit = {
							is_ship_class = shipclass_constructor
							any_owned_ship = { has_component = PSI_JUMP_DRIVE_1 }
						}
						count = 0
					}
				}
				random_owned_fleet = {
					limit = { is_ship_size = constructor }
					set_ship_design = { design = "NAME_Penitent" }
					set_fleet_settings = { can_upgrade = no spawn_debris = no }
				}
			}
		}

		# random_playable_country = {
		# 	limit = {
		# 		OR = {
		# 			has_origin = origin_soulkeepers
		# 			AND = { has_soulkeepers_origin = yes has_country_flag = chaos_empire }
		# 		}
		# 	}
		# 	# v.3.9.2 For most compatibility (using has_soulkeepers_origin)
		# 	set_origin = origin_void_dwellers
		# 	set_country_flag = origin_soulkeepers
		# 	set_country_flag = eldar_empire
		# 	remove_country_flag = chaos_empire
		# }
		# # Keept for backward compat. (removed in v3.11)
		# every_playable_country = {
		# 	limit = { has_civic = civic_imperialcult }
		# 	force_remove_civic = civic_imperialcult
		# 	force_add_civic = civic_imperial_cult
		# }
		# # Keept for backward compat. (removed in v3.11)
		# random_playable_country = {
		# 	limit = { has_origin = origin_reawakened }
		# 	set_origin = origin_necron_awakening
		# 	set_global_flag = necron_empire_created
		# 	owner_main_species = {
		# 		if = {
		# 			limit = { NOT = { has_trait = trait_necrons } }
		# 			change_species_characteristics = { add_trait = trait_necrons add_traits_at_start_of_list = yes can_change_leader = yes }
		# 		}
		# 		if = {
		# 			limit = { NOT = { is_species_class = MACHINE } }
		# 			mirror_species = { CLASS = MACHINE }
		# 			if = {
		# 				limit = { NOT = { has_trait = trait_machine_unit } }
		# 				change_species_characteristics = { add_trait = trait_machine_unit add_traits_at_start_of_list = yes }
		# 			}
		# 		}
		# 	}
		# 	save_event_target_as = necron_empire
		# }

		# Created in v3.14.159
		# if = {
		# 	limit = {
		# 		NOT = { has_global_flag = switched_chaos_touched_traid }
		# 		any_country = {
		# 			any_owned_species = { has_trait = trait_heretic_astartes }
		# 		}
		# 	}
		# 	set_global_flag = switched_chaos_touched_traid
		# 	every_country = {
		# 		limit = { any_owned_species = { has_trait = trait_heretic_astartes } }
		# 		every_owned_species = {
		# 			limit = { has_trait = trait_heretic_astartes }
		# 			change_species_characteristics = { remove_trait = trait_heretic_astartes add_trait = trait_heretic_astartes }
		# 			if = {
		# 				limit = { prev = { NOT = { has_country_flag = chaos_empire } } }
		# 				prev = {
		# 					if = {
		# 						limit = {
		# 							NOT = { has_policy_flag = purge_allowed }
		# 							can_set_policy = { policy = purge option = purge_allowed }
		# 						}
		# 						set_policy = { policy = purge option = purge_allowed cooldown = yes }
		# 					}
		# 				}
		# 				if = {
		# 					limit = {
		# 						prev = { has_policy_flag = purge_allowed }
		# 						NOR = {
		# 							has_citizenship_type = { type = citizenship_purge country = prev }
		# 							has_purge_type = { country = prev type = purge_neutering }
		# 						}
		# 					}
		# 					set_citizenship_type = { country = prev type = citizenship_purge cooldown = yes }
		# 					set_purge_type = { country = prev type = purge_neutering cooldown = yes }
		# 				}
		# 				else = {
		# 					every_species_pop = {
		# 						limit = {
		# 							exists = owner
		# 							is_owned_by = prevprevprev
		# 						}
		# 						random = { chance = 75 kill_pop = yes }
		# 					}
		# 				}
		# 			}
		# 		}
		# 	}
		# }

		# Removed in v3.13
		# if = {
		# 	limit = {
		# 		NOT = { has_global_flag = necron_empire_created }
		# 		any_playable_country = { has_origin = origin_necron_awakening }
		# 	}
		# 	set_global_flag = necron_empire_created
		# 	random_playable_country = {
		# 		limit = { has_origin = origin_necron_awakening }
		# 		save_event_target_as = necron_empire
		# 	}
		# }
		# if = {
		# 	limit = { has_global_flag = necron_empire_created exists = event_target:necron_empire }
		# 	event_target:necron_empire = {
		# 		if = {
		# 			limit = { is_ai = yes }
		# 			random_owned_species = {
		# 				limit = {
		# 					is_sapient = yes
		# 					has_trait = trait_machine_unit
		# 					has_trait = trait_necrons
		# 					OR = {
		# 						has_species_flag = machine_god
		# 						any_species_pop = { has_modifier = machine_god }
		# 						species_portrait = par_renown_03
		# 					}
		# 					count_species_pop = { count > 0 }
		# 				}
		# 				every_species_pop = {
		# 					# limit = { NOT = { has_modifier = machine_god } }
		# 					kill_pop = yes
		# 				}
		# 			}
		# 		}
		# 		else_if = {
		# 			limit = { exists = ruler has_leader_flag = paragon_origin_legendary_leader }
		# 			ruler = { remove_leader_flag = paragon_origin_legendary_leader }
		# 		}
		# 	}
		# }
	}
}

# Handle peace_sucks modifiers (on_war_beginning / on_yearly_pulse_country) # Was on_monthly_pulse_country
country_event = {
	id = aagrimstarts.100
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_ai = yes
		OR = { has_origin = origin_shroudrage has_origin = origin_barbarichorde has_origin = origin_bioreformers }
		years_passed > 30 # num_communications > 1
	}
	immediate = {
		set_update_modifiers_batch = begin
		if = {
			limit = { is_at_war = yes }
			remove_modifier = peace_sucks_1
			remove_modifier = peace_sucks_2
			remove_modifier = peace_sucks_3
			remove_modifier = peace_sucks_4
			remove_modifier = peace_sucks_5
			if = {
				limit = {
					has_origin = origin_shroudrage
					NOT = { has_modifier = we_love_war }
				}
				add_modifier = { modifier = we_love_war days = -1 }
				if = {
					limit = { has_resource = { type = alloys amount < 2000 } }
					add_resource = { alloys = 2000 minerals = 1000 }
				}
			}
			if = {
				limit = {
					has_origin = origin_barbarichorde
					NOT = { has_modifier = we_love_waaagh }
				}
				add_modifier = { modifier = we_love_waaagh days = -1 }
			}
		}
		else = {
			remove_modifier = we_love_waaagh
			remove_modifier = we_love_war
			if = {
				limit = {
					NOR = {
						has_modifier = peace_sucks_1
						has_modifier = peace_sucks_2
						has_modifier = peace_sucks_3
						has_modifier = peace_sucks_4
						has_modifier = peace_sucks_5
					}
				}
				if = {
					limit = { years_of_peace = { value > 2 } }
					add_modifier = { modifier = peace_sucks_1 days = -1 }
				}
			}
			else = {
				if = {
					limit = {
						OR = {
							years_of_peace = { value < 10 }
							years_of_peace = { value > 25 }
						}
					}
					remove_modifier = peace_sucks_1
					remove_modifier = peace_sucks_2
					remove_modifier = peace_sucks_3
					remove_modifier = peace_sucks_4
					if = {
						limit = { NOT = { has_modifier = peace_sucks_5 } }
						add_modifier = { modifier = peace_sucks_5 days = -1 }
					}
				}
				else_if = {
					limit = { years_of_peace = { value <= 15 } }
					remove_modifier = peace_sucks_1
					if = {
						limit = { NOT = { has_modifier = peace_sucks_2 } }
						add_modifier = { modifier = peace_sucks_2 days = -1 }
					}
					remove_modifier = peace_sucks_3
					remove_modifier = peace_sucks_4
					remove_modifier = peace_sucks_5
				}
				else_if = {
					limit = { years_of_peace = { value <= 20 } }
					remove_modifier = peace_sucks_1
					remove_modifier = peace_sucks_2
					if = {
						limit = { NOT = { has_modifier = peace_sucks_3 } }
						add_modifier = { modifier = peace_sucks_3 days = -1 }
					}
					remove_modifier = peace_sucks_4
					remove_modifier = peace_sucks_5
				}
				else = {
					remove_modifier = peace_sucks_1
					remove_modifier = peace_sucks_2
					remove_modifier = peace_sucks_3
					if = {
						limit = { NOT = { has_modifier = peace_sucks_4 } }
						add_modifier = { modifier = peace_sucks_4 days = -1 }
					}
					remove_modifier = peace_sucks_5
				}
			}
		}
		set_update_modifiers_batch = end
	}
}

# Handle Chaos Factions (on_monthly_pulse)
event = {
	id = aagrimstarts.1001
	hide_window = yes
	is_triggered_only = yes
	trigger = { years_passed > 24 }
	immediate = {
		random_playable_country = {
			limit = {
				is_ai = yes
				num_communications > 1
				OR = {
					has_shroudsick_origin = yes		# Chaos Nurglen (Death Guard)
					has_origin = origin_shroudrage		# Chaos Khornate (World Eaters)
					has_origin = origin_shroudsinners	# Chaos Slaaneshi (Emperor's Children)
					has_origin = origin_shroudmutated	# Chaos Tzeentch (Thousand Sons)
					has_origin = origin_paindrinkers	# Dark Eldar (Drukhari)
					has_origin = origin_necron_awakening	# Necrons (The Undying)
					has_origin = origin_bioreformers	# Tyranid
					has_origin = origin_barbarichorde	# Ork Greenskins (Waaagh!) seems too strong
					# has_country_flag = chaos_empire
				}
				NOR = { has_country_flag = cf_grimdark_unemployed_cooldown has_country_flag = under_tmp_colonization }

			}
			# country_event = { id = aagrimstarts.100 }	# Handle peace_sucks modifiers
			country_event = { id = aagrimstarts.1300 }	# Check planets employment
		}
	}
}

# Set Servile Species with civic_fanatic_purifiers
# event_target:servile_species
country_event = {
	id = aagrimstarts.222
	hide_window = yes
	is_triggered_only = yes
	trigger = { }
	immediate = {
		reset_policy_cooldowns = yes # v.3.8
		get_capital_planet = yes
		if = {
			limit = { NOT = { has_policy_flag = purge_not_allowed } can_set_policy = { policy = purge option = purge_not_allowed } }
			set_policy = { policy = purge option = purge_not_allowed cooldown = yes }
		}
		if = {
			limit = { is_slaver = yes NOT = { has_policy_flag = slavery_allowed } can_set_policy = { policy = slavery option = slavery_allowed } }
			set_policy = { policy = slavery option = slavery_allowed cooldown = yes }
		}
		if = {
			limit = { NOT = { exists = event_target:servile_species } }
			random_owned_species = {
				limit = {
					is_sapient = yes
					NOT = { is_same_species = root.owner_main_species }
					num_positive_traits > 1
				}
				save_event_target_as = servile_species
			}
		}
		if = {
			limit = { NOT = { exists = event_target:servile_species } }
			if = {
				limit = {
					any_galaxy_species = {
						is_sapient = yes
						is_species_class = "AVI"
						species_portrait = "avi14"
						OR = { has_trait = "trait_syncretic_proles" has_trait = "trait_conformists" has_trait = "trait_fleeting" }
						num_positive_traits > 1
					}
				}
				random_galaxy_species = {
					limit = {
						is_sapient = yes
						is_species_class = "AVI"
						species_portrait = "avi14"
						OR = { has_trait = "trait_syncretic_proles" has_trait = "trait_conformists" has_trait = "trait_fleeting" }
						num_positive_traits > 1
					}
					save_event_target_as = servile_species
				}
			}
			# else_if = {
			# 	limit = {
			# 		any_galaxy_species = {
			# 			is_sapient = yes
			# 			OR = { species_portrait = "Kroot" is_species_class = "Tau" is_species_class = "AVI" }
			# 			num_positive_traits > 1
			# 		}
			# 	}
			# 	random_galaxy_species = {
			# 		limit = {
			# 			is_sapient = yes
			# 			OR = { species_portrait = "Kroot" is_species_class = "Tau" is_species_class = "AVI" }
			# 			num_positive_traits > 1
			# 		}
			# 		save_event_target_as = servile_species
			# 	}
			# }
			else_if = {
				limit = {
					any_galaxy_species = {
						is_sapient = yes
						OR = { is_species_class = "MAM" is_species_class = "REP" }
						OR = { has_trait = "trait_syncretic_proles" has_trait = "trait_conformists" has_trait = "trait_fleeting" }
						num_positive_traits > 1
					}
				}
				random_galaxy_species = {
					limit = {
						is_sapient = yes
						OR = { is_species_class = "MAM" is_species_class = "REP" }
						OR = { has_trait = "trait_syncretic_proles" has_trait = "trait_conformists" has_trait = "trait_fleeting" }
						num_positive_traits > 1
					}
					save_event_target_as = servile_species
				}
			}
			else = {
				random_system = {
					limit = {
						is_star_class = sc_g
						any_system_planet = { planet_size > 15 colonizable_planet = yes }
					}
					random_system_planet = {
						limit = { planet_size > 15 colonizable_planet = yes }
						weights = { base = 1
							modifier = { add = 5 is_planet_class = pc_arid }
							modifier = { add = 10 merg_is_gaia_basic = yes }
							modifier = { add = 20 is_planet_class = pc_tropical }
							modifier = { add = 100 has_planet_flag = Pechplanet }
						}
						save_event_target_as = pech
					}
				}
				create_species = {
					name = "Kroot"
					class = "AVI"
					portrait = "avi14"
					plural = "Kroot_plural"
					adjective = "Kroot_adj"
					species_bio = "Kroot_desc"
					name_list = "AVI2"
					gender = not_set
					# homeworld = event_target:pech # Jungle-covered Death World Pech
					extra_trait_points = 4
					traits = {
						trait = "trait_pc_tropical_preference"
						trait = "trait_syncretic_proles" # 0
						# trait = "trait_necrophage"		# 0
						trait = "trait_adaptive"		# +2
						trait = "trait_rapid_breeders"	# +2
						trait = "trait_conformists"		# +2
						trait = "trait_communal"		# +1
						trait = "trait_strong"			# +1
						trait = "trait_resilient"		# +1
						trait = "trait_fleeting"		# -1
						trait = "trait_unruly"			# -2
					}
					effect = {
						save_event_target_as = servile_species
						set_species_flag = syncretic_species@root
						if = {
							limit = { exists = event_target:pech }
							set_species_homeworld = event_target:pech
						}
					}
				}
			}
		}
		event_target:servile_species = {
			if = {
				limit = {
					NOT = { has_trait = trait_syncretic_proles }
					root = { has_policy_flag = slavery_allowed }
				}
				modify_species = {
					add_trait = trait_syncretic_proles
					add_traits_at_start_of_list = yes
					effect = { save_event_target_as = servile_species }
				}
			}
		}
		event_target:servile_species = {
			every_species_pop = { remove_pop_flag = event_purge clear_pop_category = yes }
			# log="Set servile species right [This.GetName]"
			# paindrinkers, barbarichorde, greatergood
			# grimdark_create_extra_pops
			# if = {
			# 	limit = {
			# 		root = {
			# 			OR = { has_origin = origin_barbarichorde has_origin = origin_greatergood }
			# 		}
			# 	}
			# }
			if = {
				limit = {
					root = { has_policy_flag = slavery_allowed }
					NOR = {
						has_citizenship_type = { type = citizenship_slavery country = root }
						has_slavery_type = { country = root type = slavery_indentured }
					}
				}
				set_citizenship_type = { country = root type = citizenship_slavery cooldown = yes }
				set_slavery_type = { country = root type = slavery_indentured cooldown = yes }
			}
			else_if = {
				limit = {
					root = { can_set_policy = { policy = purge option = purge_not_allowed } }
					NOR = {
						has_citizenship_type = { type = citizenship_purge country = root }
						has_purge_type = { country = root type = purge_neutering }
					}
					any_species_pop = { is_being_purged = yes }
				}
				set_citizenship_type = { country = root type = citizenship_purge cooldown = yes }
				set_purge_type = { country = root type = purge_neutering cooldown = yes }
			}
			else_if = {
				limit = {
					NOR = {
						has_citizenship_type = { type = citizenship_slavery country = root }
						has_citizenship_type = { type = citizenship_limited country = root }
						root = { has_origin = origin_greatergood }
					}
				}
				set_species_flag = syncretic_species@root
				# limit = { root = { has_origin = origin_barbarichorde } }
				set_citizenship_type = { country = root type = citizenship_limited cooldown = yes }
			}
			set_living_standard = { country = root type = living_standard_subsistence cooldown = yes }
			if = {
				limit = {
					NOR = {
						has_military_service_type = { type = military_service_limited country = root }
						any_species_pop = { is_militarist = yes }
					}
				}
				set_military_service_type = { type = military_service_limited country = root cooldown = yes }
			}
			# if = { WARNING: can lead to CTD
			# 	limit = {
			# 		root = { has_policy_flag = resettlement_allowed }
			# 		has_migration_control = { type = no country = root }
			# 	}
			# 	set_migration_controls = { type = yes country = root cooldown = no }
			# }
			# if = {
			# 	limit = { has_colonization_control = { type = no country = root } }
			# 	set_colonization_controls = { type = yes country = root cooldown = yes }
			# }
			random_galaxy_species = {
				limit = {
					is_sapient = yes
					is_same_species_class = prev
					NOR = { is_same_species = prev is_same_species = root.owner_species }
					# species_portrait = prev # TODO scope allowed?
					OR = { # If scope is not scope allowed is_species_class = HUM
						AND = { prev = { species_portrait = "Servitors" } species_portrait = "Servitors" } # human_legacy HUM Mechanicus
						AND = { prev = { species_portrait = "humanoid_hp_12" } species_portrait = "humanoid_hp_12" } # HUM Drukhari
						AND = { prev = { OR = { species_portrait = "Kroot" is_species = "Kroot" } } OR = { species_portrait = "Kroot" is_species = "Kroot" } } # avi14 HUM Tau
						AND = { prev = { species_portrait = "Gretchins" } species_portrait = "Gretchins" } # rep11 HUM Orks
					}
					num_positive_traits > 1
				}
				prev = { set_species_identity = prev }
			}
		}
		event_target:capital_planet = {
			create_pop = { species = event_target:servile_species count = 12 ethos = random }
		}
	}
	after = {
		if = {
			limit = { any_owned_species = { num_positive_traits < 2 } }
			random_owned_species = {
				limit = { num_positive_traits < 2 }
				every_species_pop = {
					limit = { exists = owner is_owned_by = root }
					kill_pop = yes
				}
			}
		}
	}
}

# (on_colonized)
planet_event = {
	id = aagrimstarts.1200
	is_triggered_only = yes
	title = "job_exodite_plural"
	desc = aagrimstarts.1200.desc
	picture = GFX_evt_colony_settlement
	pre_triggers = { has_owner = yes original_owner = yes }
	trigger = {
		is_colony = yes
		exists = owner
		owner = { is_ai = no has_soulkeepers_origin = yes }
		has_deposit = d_aa_exodite_enclave
		NOT = { has_planet_flag = pf_told_about_exodites }
	}
	immediate = { set_planet_flag = pf_told_about_exodites }
	option = { name = aagrimstarts.1200.option.a }
}

# Check planets employment - (indirect on_monthly_pulse/ on_game_start)
country_event = {
	id = aagrimstarts.1300
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = capital_scope
		# NOT = { has_country_flag = cf_grimdark_unemployed_cooldown }
	}
	immediate = {
		if = {
			limit = { any_owned_pop = { is_unemployed = yes } }
			country_event = { id = aagrimstarts.1301 days = 10 random = 10 }
		}
		if = {
			# Cheap workaround for helping colonizing
			limit = {
				controlled_colonizable > 0
				# ai_colonize_plans = 0
				NOT = { has_country_flag = under_tmp_colonization }
				any_system_within_border = {
					has_access_fleet = root
					count_system_colony = { count = 0 }
					any_system_planet = {
						is_colonizable = yes
						can_colonize = { who = root status = yes }
					}
				}
			}
			set_timed_country_flag = { flag = under_tmp_colonization years = 1 }
			if = {
				limit = { any_owned_fleet = { is_ship_class = shipclass_colonizer is_fleet_idle = yes } }
				if = {
					limit = {
						any_owned_fleet = {
							is_fleet_idle = yes
							any_owned_ship = {
								is_ship_class = shipclass_colonizer
								root = {
									any_system_within_border = {
										has_access_fleet = root
										count_system_colony = { count = 0 }
										any_system_planet = {
											NOR = { has_owner = yes has_planet_flag = under_tmp_colonization }
											is_colonizable = yes
											can_colonize = { who = root status = yes }
											prevprevprev.species = { can_live_on_planet = prev }
											habitability = { who = prevprevprev.species value >= 0.7 }
										}
										prevprevprev = { can_access_system = prev }
									}
								}
							}
						}
					}
					every_owned_fleet = {
						limit = {
							is_fleet_idle = yes
							any_owned_ship = {
								is_ship_class = shipclass_colonizer
								root = {
									any_system_within_border = {
										has_access_fleet = root
										count_system_colony = { count = 0 }
										any_system_planet = {
											NOR = { has_owner = yes has_planet_flag = under_tmp_colonization }
											is_colonizable = yes
											can_colonize = { who = root status = yes }
											prevprevprev.species = { can_live_on_planet = prev }
											habitability = { who = prevprevprev.species value >= 0.7 }
										}
										prevprevprev = { can_access_system = prev }
									}
								}
							}
						}
						random_owned_ship = {
							root = {
								random_system_within_border = {
									limit = {
										has_access_fleet = root
										count_system_colony = { count = 0 }
										any_system_planet = {
											is_colonizable = yes
											can_colonize = { who = root status = yes }
											prevprevprev.species = { can_live_on_planet = prev }
											habitability = { who = prevprevprev.species value >= 0.7 }
										}
										prevprevprev = { can_access_system = prev }
									}
									random_system_planet = {
										limit = {
											NOR = { has_owner = yes has_planet_flag = under_tmp_colonization }
											is_colonizable = yes
											can_colonize = { who = root status = yes }
											prevprevprev.species = { can_live_on_planet = prev }
											habitability = { who = prevprevprev.species value >= 0.7 }
										}
										set_timed_planet_flag = { flag = under_tmp_colonization years = 1 }
										root = { set_timed_country_flag = { flag = cf_grimdark_unemployed_cooldown months = 2 } }
										prevprevprev = {
											fleet = {
												log="\\[Root.GetName] starts auto-colonizing \\[prevprev.GetName]"
												queue_actions = {
													move_to = prevprev
													orbit_planet = prevprev
													effect = {
														id = colonize_planet.effect@this
														orbit = {
															if = {
																limit = { is_colonizable = yes }
																start_colony = { owner = root species = prevprev.species }
															}
															else = {
																create_pop = { species = prevprev.species ethos = { ethic = ethic_xenophobe ethic = ethic_militarist } }
															}
														}
														delete_fleet = this
													}
												}
											}
											auto_move_to_planet = {
												target = prev
												clear_auto_move_on_arrival = yes
												arrival_effect = colonize_planet # set_fleet_order = colonize_planet
												# arrival_effect = { random_owned_ship = { orbit = { start_colony = { owner = root species = prev.species } } } }
												# destroy_on_arrival = yes
											}
										}
									}
								}
							}
						}
					}
				}
				# TODO Fallback
				else = { log = "Colonizer has no access? \\[This.GetName]" }
			}
			else_if = {
				limit = {
					exists = capital_star.starbase
					exists = capital_star.starbase.owner
					# exists = capital_star.space_owner
					capital_star.starbase.owner = { is_same_empire = root }
					NOR = {
						any_owned_fleet = { is_ship_class = shipclass_colonizer }
						capital_star.solar_system = {
							any_fleet_in_system = { is_mobile = yes is_owned_by = root }
						}
					}
					any_owned_species = {
						NOR = {
							has_citizenship_type = { type = citizenship_purge country = root }
							has_purge_type = { country = root type = purge_neutering }
							# any_species_pop = { is_being_purged = yes }
						}
						root = {
							any_system_within_border = {
								has_access_fleet = root
								count_system_colony = { count = 0 }
								any_system_planet = {
									NOR = { has_owner = yes has_planet_flag = under_tmp_colonization }
									is_colonizable = yes
									can_colonize = { who = root status = yes }
									prevprevprev = { can_live_on_planet = prev }
									habitability = { who = prevprevprev value >= 0.7 }
								}
							}
						}
					}
				}
				random_owned_species = {
					limit = {
						NOR = {
							has_citizenship_type = { type = citizenship_purge country = root }
							has_purge_type = { country = root type = purge_neutering }
							# any_species_pop = { is_being_purged = yes }
						}
						root = {
							any_system_within_border = {
								has_access_fleet = root
								count_system_colony = { count = 0 }
								any_system_planet = {
									NOR = { has_owner = yes has_planet_flag = under_tmp_colonization }
									is_colonizable = yes
									can_colonize = { who = root status = yes }
									prevprevprev = { can_live_on_planet = prev }
									habitability = { who = prevprevprev value >= 0.7 }
								}
							}
						}
					}
					weights = { base = 1 modifier = { add = 10 NOT = { is_same_species = root.owner_main_species } } }
					prev = {
						capital_scope = {
							create_fleet = {
								effect = {
									set_owner = root
									create_ship = { random_existing_design = colonizer colonizer_species = prevprevprev }
									set_location = { target = prev.starbase distance = 5 }
								}
								settings = {
									can_change_composition = no
									can_change_leader = no
									uses_naval_capacity = no
									spawn_debris = no
								}
							}
						}
						set_timed_country_flag = { flag = cf_grimdark_unemployed_cooldown months = 2 }
					}
				}
			}
			else_if = {
				limit = {
					any_owned_species = {
						NOR = {
							has_citizenship_type = { type = citizenship_purge country = root }
							has_purge_type = { country = root type = purge_neutering }
							# any_species_pop = { is_being_purged = yes }
						}
						root = {
							any_system_within_border = {
								has_access_fleet = root
								count_system_colony = { count = 0 }
								any_system_planet = {
									NOR = { has_owner = yes has_planet_flag = under_tmp_colonization }
									is_colonizable = yes
									can_colonize = { who = root status = yes }
									prevprevprev = { can_live_on_planet = prev }
									habitability = { who = prevprevprev value >= 0.7 }
								}
								root.capital_scope.solar_system = {
									any_fleet_in_system = { is_mobile = yes is_owned_by = root can_access_system = prevprev }
								}
							}
						}
					}
				}
				random_owned_species = {
					limit = {
						NOR = {
							has_citizenship_type = { type = citizenship_purge country = root }
							has_purge_type = { country = root type = purge_neutering }
							# any_species_pop = { is_being_purged = yes }
						}
						prev = {
							any_system_within_border = {
								has_access_fleet = root
								count_system_colony = { count = 0 }
								any_system_planet = {
									NOR = { has_owner = yes has_planet_flag = under_tmp_colonization }
									is_colonizable = yes
									can_colonize = { who = root status = yes }
									prevprevprev = { can_live_on_planet = prev }
									habitability = { who = prevprevprev value >= 0.7 }
								}
								root.capital_scope.solar_system = {
									any_fleet_in_system = { is_mobile = yes is_owned_by = root can_access_system = prevprev }
								}
							}
						}
					}
					weights = { base = 1 modifier = { add = 10 NOT = { is_same_species = root.owner_main_species } } }
					prev = {
						capital_scope = {
							create_fleet = {
								effect = {
									set_owner = root
									create_ship = { random_existing_design = colonizer colonizer_species = prevprev }
									set_location = { target = prev distance = 5 }
								}
								settings = {
									can_change_composition = no
									can_change_leader = no
									uses_naval_capacity = no
									spawn_debris = no
								}
							}
						}
						set_timed_country_flag = { flag = cf_grimdark_unemployed_cooldown months = 2 }
					}
				}
			}
		}
	}
}

# Check planets employment - (indirect on_monthly_pulse/ on_game_start)
country_event = {
	id = aagrimstarts.1301
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		# OR = {
		# 	has_shroudsick_origin = yes
		# 	has_origin = origin_shroudrage
		# 	has_origin = origin_shroudsinners
		# 	has_origin = origin_shroudmutated
		# 	has_origin = origin_barbarichorde
		# 	has_origin = origin_paindrinkers
		# }
		# NOT = { has_country_flag = cf_grimdark_unemployed_cooldown }
		any_owned_pop = { is_unemployed = yes }
	}
	immediate = {
		random_owned_planet = {
			limit = {
				is_colony = yes
				num_sapient_pops > 1
				NOT = { has_planet_flag = pf_grimdark_unemployed_cooldown }
				any_owned_pop = { is_unemployed = yes }
			}
			random_owned_pop = {
				limit = { is_unemployed = yes }
				clear_pop_category = yes
			}
			check_planet_employment = yes
			if = {
				limit = { count_owned_pop = { limit = { is_unemployed = yes } count = 0 } }
				set_timed_planet_flag = { flag = pf_grimdark_unemployed_cooldown months = 3 }
				# root = { set_timed_country_flag = { flag = cf_grimdark_unemployed_cooldown months = 2 } }
			}
			# Be not that gready, can lead to endless loop
			# random_owned_pop = {
			# 	limit = { is_unemployed = yes }
			# 	prev = {
			# 		every_owned_pop = {
			# 			limit = { is_unemployed = yes }
			# 			clear_pop_category = yes
			# 		}
			# 		check_planet_employment = yes
			# 		if = { limit = { count_owned_pop = { limit = { is_unemployed = yes } count = 0 } }
			# 			set_timed_planet_flag = { flag = pf_grimdark_unemployed_cooldown months = 3 }
			# 		}
			# 		else = { check_planet_employment = yes }
			# 	}
			# 	if = {
			# 		limit = {
			# 			planet = {
			# 				any_owned_pop = { is_unemployed = yes }
			# 			}
			# 		}
			# 		owner = {
			# 			country_event = { id = aagrimstarts.1301 days = 1 random = 3 }
			# 		}
			# 	}
			# 	else = {
			# 		owner = {
			# 			set_timed_country_flag = { flag = cf_grimdark_unemployed_cooldown months = 1 }
			# 		}
			# 	}
			# }
		}
		# Resettle
		random_owned_planet = {
			limit = {
				is_colony = yes
				is_under_colonization = no
				num_sapient_pops > 5
				colony_age > 64
				num_assigned_jobs = { job = unemployed value > 0 }
				# PREV = {
				# 	resource_stockpile_compare = { resource = energy value >= 100 mult = value:positive_modifier_mult|MODIFIER|country_resettlement_cost_mult| }
				# 	resource_stockpile_compare = { resource = unity value >= 10 mult = value:positive_modifier_mult|MODIFIER|country_resettlement_cost_mult| }
				# }
			}
			random_owned_pop = {
				limit = {
					is_unemployed = yes
					NOR = {
						is_being_purged = yes
						# has_pop_flag = recently_resettled_pop_flag
						has_job = bio_trophy
					}
				}
				# set_timed_pop_flag = { flag = recently_resettled_pop_flag years = 1 }
				root = {
					random_owned_planet = {
						limit = { is_colony = yes free_jobs > 0 }
						resettle_pop = { pop = prevprev planet = this }
						# prev = {
						# 	add_resource = { energy = -100 mult = value:negative_modifier_mult|MODIFIER|country_resettlement_cost_mult| }
						# 	add_resource = { unity = -10 mult = value:negative_modifier_mult|MODIFIER|country_resettlement_cost_mult| }
						# }
						check_planet_employment = yes
					}
				}
			}
		}
	}
}

## SHROUDINFECTION
# on_planet_occupied / on_planet_transfer / on_colonized
planet_event = {
	id = aagrimstarts.1400
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = { has_owner = yes }
	trigger = {
		OR = {
			AND = {
				exists = owner
				owner = { has_shroudsick_origin = yes }
			}
			AND = {
				exists = controller
				controller = { has_shroudsick_origin = yes }
			}
		}
		NOR = { has_planet_flag = pf_infected_begun has_modifier = shroudinfection_begins has_modifier = shroudinfection_progression }
		uses_district_set = standard
	}
	immediate = {
		set_planet_flag = pf_infected_begun
		planet_event = { id = aagrimstarts.1410 days = 2 random = 3 }
	}
}

# Shroudinfection begins
planet_event = {
	id = aagrimstarts.1410
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = { has_owner = yes }
	trigger = {
		OR = {
			AND = {
				exists = owner
				owner = { has_shroudsick_origin = yes }
			}
			AND = {
				exists = controller
				controller = { has_shroudsick_origin = yes }
			}
		}
		NOR = {
			has_modifier = shroudinfection_begins
			has_modifier = shroudinfection_progression
			is_planet_class = pc_infested # pc_infected
		}
		uses_district_set = standard
		has_planet_flag = pf_infected_begun
	}
	immediate = {
		if = {
			limit = { num_sapient_pops > 1 }
			add_modifier = { modifier = shroudinfection_begins years = 2 }
			planet_event = { id = aagrimstarts.1420 days = 727 } # 7 days more
		}
		else = {
			planet_event = { id = aagrimstarts.1410 days = 60 random = 60 }
		}
	}
}

# Shroudinfection progression
planet_event = {
	id = aagrimstarts.1420
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = { has_owner = yes }
	trigger = {
		OR = {
			AND = {
				exists = owner
				owner = { has_shroudsick_origin = yes }
			}
			AND = {
				exists = controller
				controller = { has_shroudsick_origin = yes }
			}
		}
		NOR = {
			has_modifier = shroudinfection_begins
			has_modifier = shroudinfection_progression
			is_planet_class = pc_infested # pc_infected
		}
	}
	immediate = {
		if = {
			limit = { num_sapient_pops > 1 }
			add_modifier = { modifier = shroudinfection_progression years = 3 }
			planet_event = { id = aagrimstarts.1430 days = 1080 }
		}
		else = {
			planet_event = { id = aagrimstarts.1420 days = 60 random = 60 }
		}
	}
}

# TODO:
# The AI won't build buildings or the unique districts on infected worlds, also with the other chaos god origins
# They don't build on their world too much which made them all be destroyed by other AI empires over the test run.
planet_event = {
	id = aagrimstarts.1430
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = { has_owner = yes }
	trigger = {
		OR = {
			AND = {
				exists = owner
				owner = { has_shroudsick_origin = yes }
			}
			AND = {
				exists = controller
				controller = { has_shroudsick_origin = yes }
			}
		}
		num_sapient_pops > 1
		NOT = {
			is_planet_class = pc_infested # pc_infected
		}
	}
	immediate = {
		change_pc = pc_infested # pc_infected
		# TODO !?
		set_planet_flag = pf_hide_city
		set_planet_flag = pf_hide_generator
		set_planet_flag = pf_hide_farming
		set_planet_flag = pf_hide_mining
		clear_blockers = yes
		remove_building = building_colony_shelter
		remove_building = building_hive_capital
		remove_building = building_deployment_post
		remove_building = building_capital
		remove_building = building_hive_capital
		remove_building = building_machine_capital
		remove_building = building_resort_capital
		remove_building = building_slave_capital
		remove_building = building_major_capital
		remove_building = building_hive_major_capital
		remove_building = building_machine_major_capital
		remove_building = building_resort_major_capital
		remove_building = building_slave_major_capital
		remove_building = building_system_capital
		add_building = building_hive_major_capital_sick
		if = {
			limit = { NOT = { has_modifier = resort_colony } }
			remove_district = district_farming
			remove_district = district_farming_uncapped
			add_district = { district_type = district_farming_infected ignore_cap = yes }
			if = {
				limit = { num_sapient_pops > 5 }
				remove_district = district_hive
				# remove_district = district_hive_uncapped
				add_district = { district_type = district_hive_infected ignore_cap = yes }
				if = {
					limit = { num_sapient_pops > 10 }
					remove_district = district_hive
					# remove_district = district_hive_uncapped
					remove_district = district_mining
					# remove_district = district_mining_uncapped
					add_district = { district_type = district_hive_infected ignore_cap = yes }
					add_district = { district_type = district_mining_infected ignore_cap = yes }
					if = {
						limit = { num_sapient_pops > 20 }
						remove_district = district_hive
						# remove_district = district_hive_uncapped
						remove_district = district_farming
						remove_district = district_farming_uncapped
						add_district = { district_type = district_hive_infected ignore_cap = yes }
						add_district = { district_type = district_farming_infected ignore_cap = yes }
						if = {
							limit = { num_sapient_pops > 30 }
							remove_district = district_hive
							# remove_district = district_hive_uncapped
							remove_district = district_generator
							remove_district = district_generator_uncapped
							add_district = { district_type = district_hive_infected ignore_cap = yes }
							add_district = { district_type = district_generator_infected ignore_cap = yes }
						}
					}
				}
			}
		}
	}
}
