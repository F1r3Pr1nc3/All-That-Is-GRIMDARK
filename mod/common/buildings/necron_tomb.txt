#############
# necron_tomb
#############
necron_tomb = {
	icon = building_necron_tomb
	base_buildtime = 220
	can_build = yes
	can_demolish = no
	can_be_ruined = yes
	can_be_disabled = yes
	base_cap_amount = 1
	planetary_ftl_inhibitor = yes
	category = resource

	empire_limit = {
		base = 5
		# modifier = { factor = 2 has_country_flag = test_flag }
	}

	potential = {
		exists = owner
		owner = { has_necron_origin = yes }
		custom_tooltip = {
			text = EMPIRE_UNIQUE_BUILDING
			owner = {
				check_variable = { which = built_necron_tomb value < 5 }
				# NAND = { has_country_flag = built_one_necron_tomb has_country_flag = built_two_necron_tomb }
			}
		}
		NOT = { has_modifier = slave_colony }
	}

	abort_trigger = {
		owner = { check_variable = { which = built_necron_tomb value >= 5 } }
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = {
				NOR = {
					has_necron_origin = yes
					check_variable = { which = built_necron_tomb value < 5 }
				}
			}
			has_modifier = slave_colony
		}
	}

	planet_modifier = {
		planet_housing_add = 20
		planet_army_build_speed_mult = -0.25
		planet_army_build_time_mult = -0.25
		defense_armies_add = 8 # planet_fortification_strength = 8
		# planet_combat_width_add = 4 TODO?
		# army_defense_health_mult = 1.5 TODO?
		# army_defense_damage_mult = 1.5 TODO?
		pop_happiness = 5
	}
	# triggered_planet_modifier = {
	# 	potential = {
	# 		exists = owner
	# 		owner = { is_regular_empire = yes }
	# 	}
	# 	modifier = {
	# 		job_researcher_add = 5
	# 	}
	# }
	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = { is_machine_empire = yes }
		}
		modifier = {
			district_mining_max = 1
			district_generator_max = 1
			job_coordinator_add = 1
			job_warrior_drone_add = 1
			job_fabricator_add = 2
			job_technician_drone_add = 2
			job_calculator_add = 8
		}
	}
	country_modifier = {
		country_admin_cap_add = 15
		country_resource_max_add = 5000
		country_leader_cap_add = 10
		planet_colony_development_speed_mult = 0.3
	}
	resources = {
		category = planet_buildings
		cost = { minerals = 500 energy = 500 }
		upkeep = { energy = 5 }
		produces = {
			unity = 10
			influence = 1
			energy = 5
			minerals = 5
			food = 1
		}
	}
	army_modifier = { army_starting_experience_add = 500 }
	triggered_desc = { text = job_merchant_effect_desc }

	on_built = {
		owner = {
			change_variable = { which = built_necron_tomb value = 1 }
			# if = {
			# 	limit = {
			# 		OR = {
			# 			has_country_flag = built_two_necron_tomb
			# 			NOT = { has_country_flag = built_one_necron_tomb }
			# 		}
			# 	}
			# 	set_country_flag = built_one_necron_tomb
			# }
			# else = { set_country_flag = built_two_necron_tomb }
		}
	}

	on_destroy = {
		owner = {
			subtract_variable = { which = built_necron_tomb value = 1 }
			# if = {
			# 	limit = {
			# 		OR = {
			# 			has_country_flag = built_two_necron_tomb
			# 			NOT = { has_country_flag = built_one_necron_tomb }
			# 		}
			# 	}
			# 	remove_country_flag = built_two_necron_tomb
			# }
			# else = { remove_country_flag = built_one_necron_tomb }
		}
	}

	# ai_weight = {
	# 	weight = 8
	# 	# There are already unworked jobs
	# 	# Blocks buildings unworkable by remaining pops (slaves/robots etc)
	# 	# Will be improved... At some point
	# 	modifier = {
	# 		factor = 0
	# 		OR = { merg_is_habitat = yes free_jobs > 0 }
	# 	}
	# }
	ai_resource_production = {
		energy = 1
		# trigger = { always = yes }
	}
}

# building_forrbiden_archive = {
# 	base_buildtime = 300
# 	base_cap_amount = 6
#	category = research
# 	potential = {
# 		exists = owner
# 		owner = { has_necron_origin = yes }
# 	}
# 	destroy_trigger = {
# 		exists = owner
# 		owner = {
# 			has_necron_origin = no
# 		}
# 	}
# 	allow = { }
# 	resources = {
# 		category = planet_buildings
# 		cost = { alloys = 500 }
# 		upkeep = { energy = 60 consumer_goods = 30 }
# 		produces = {
# 			physics_research = 30
# 			society_research = 30
# 			engineering_research = 30
# 		}
# 	}
# 	planet_modifier = { planet_researchers_produces_mult = 0.15 job_head_researcher_add = 2 }
# 	# prerequisites = { }
# 	# triggered_desc = { }
# 	ai_weight = { base = 500 }
# }
